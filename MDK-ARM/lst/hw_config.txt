; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\hw_config.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\hw_config.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\usb -I..\drv -I..\sys -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -IC:\Work\WiDSO-master\MCU\USB-Blaster\MDK-ARM\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\out\hw_config.crf ..\usb\hw_config.c]
                          THUMB

                          AREA ||i.Enter_LowPowerMode||, CODE, READONLY, ALIGN=2

                  Enter_LowPowerMode PROC
;;;91     *******************************************************************************/
;;;92     void Enter_LowPowerMode(void)
000000  2003              MOVS     r0,#3
;;;93     {
;;;94         /* Set the device state to suspend */
;;;95         bDeviceState = SUSPENDED;
000002  4901              LDR      r1,|L1.8|
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;96     }
000006  4770              BX       lr
;;;97     
                          ENDP

                  |L1.8|
                          DCD      bDeviceState

                          AREA ||i.Get_SerialNum||, CODE, READONLY, ALIGN=2

                  Get_SerialNum PROC
;;;210    *******************************************************************************/
;;;211    void Get_SerialNum(void)
000000  b570              PUSH     {r4-r6,lr}
;;;212    {
;;;213        uint32_t Device_Serial0, Device_Serial1, Device_Serial2;
;;;214    
;;;215        Device_Serial0 = *(uint32_t *)ID1_ADDR;
000002  4807              LDR      r0,|L2.32|
000004  6804              LDR      r4,[r0,#0]
;;;216        Device_Serial1 = *(uint32_t *)ID2_ADDR;
000006  1d00              ADDS     r0,r0,#4
000008  6805              LDR      r5,[r0,#0]
;;;217        Device_Serial2 = *(uint32_t *)ID3_ADDR;
00000a  1d00              ADDS     r0,r0,#4
00000c  6806              LDR      r6,[r0,#0]
;;;218    
;;;219        Device_Serial0 += Device_Serial1;
00000e  442c              ADD      r4,r4,r5
;;;220        Device_Serial0 += Device_Serial2;
000010  4434              ADD      r4,r4,r6
;;;221    
;;;222        if (Device_Serial0 != 0) {
000012  b124              CBZ      r4,|L2.30|
;;;223            IntToUnicode(Device_Serial0, &Blaster_StringSerial[2], 8);
000014  2208              MOVS     r2,#8
000016  4903              LDR      r1,|L2.36|
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       IntToUnicode
                  |L2.30|
;;;224        }
;;;225    }
00001e  bd70              POP      {r4-r6,pc}
;;;226    
                          ENDP

                  |L2.32|
                          DCD      0x1ffff7e8
                  |L2.36|
                          DCD      Blaster_StringSerial+0x2

                          AREA ||i.IntToUnicode||, CODE, READONLY, ALIGN=1

                  IntToUnicode PROC
;;;233    *******************************************************************************/
;;;234    static void IntToUnicode(uint32_t value , uint8_t *pbuf , uint8_t len)
000000  b530              PUSH     {r4,r5,lr}
;;;235    {
000002  460b              MOV      r3,r1
;;;236        uint8_t idx = 0;
000004  2100              MOVS     r1,#0
;;;237    
;;;238        for (idx = 0 ; idx < len ; idx ++) {
000006  bf00              NOP      
000008  e016              B        |L3.56|
                  |L3.10|
;;;239            if (((value >> 28)) < 0xA) {
00000a  240a              MOVS     r4,#0xa
00000c  ebb47f10          CMP      r4,r0,LSR #28
000010  d905              BLS      |L3.30|
;;;240                pbuf[ 2 * idx] = (value >> 28) + '0';
000012  2430              MOVS     r4,#0x30
000014  eb047410          ADD      r4,r4,r0,LSR #28
000018  f8034011          STRB     r4,[r3,r1,LSL #1]
00001c  e005              B        |L3.42|
                  |L3.30|
;;;241            } else {
;;;242                pbuf[2 * idx] = (value >> 28) + 'A' - 10;
00001e  2441              MOVS     r4,#0x41
000020  eb047410          ADD      r4,r4,r0,LSR #28
000024  3c0a              SUBS     r4,r4,#0xa
000026  f8034011          STRB     r4,[r3,r1,LSL #1]
                  |L3.42|
;;;243            }
;;;244    
;;;245            value = value << 4;
00002a  0100              LSLS     r0,r0,#4
;;;246    
;;;247            pbuf[ 2 * idx + 1] = 0;
00002c  2500              MOVS     r5,#0
00002e  004c              LSLS     r4,r1,#1
000030  1c64              ADDS     r4,r4,#1
000032  551d              STRB     r5,[r3,r4]
000034  1c4c              ADDS     r4,r1,#1              ;238
000036  b2e1              UXTB     r1,r4                 ;238
                  |L3.56|
000038  4291              CMP      r1,r2                 ;238
00003a  dbe6              BLT      |L3.10|
;;;248        }
;;;249    }
00003c  bd30              POP      {r4,r5,pc}
;;;250    
                          ENDP


                          AREA ||i.Leave_LowPowerMode||, CODE, READONLY, ALIGN=2

                  Leave_LowPowerMode PROC
;;;104    *******************************************************************************/
;;;105    void Leave_LowPowerMode(void)
000000  b510              PUSH     {r4,lr}
;;;106    {
;;;107        DEVICE_INFO *pInfo = &Device_Info;
000002  4c06              LDR      r4,|L4.28|
;;;108    
;;;109        /* Set the device state to the correct state */
;;;110        if (pInfo->Current_Configuration != 0) {
000004  7aa0              LDRB     r0,[r4,#0xa]
000006  b118              CBZ      r0,|L4.16|
;;;111            /* Device configured */
;;;112            bDeviceState = CONFIGURED;
000008  2005              MOVS     r0,#5
00000a  4905              LDR      r1,|L4.32|
00000c  6008              STR      r0,[r1,#0]  ; bDeviceState
00000e  e002              B        |L4.22|
                  |L4.16|
;;;113        } else {
;;;114            bDeviceState = ATTACHED;
000010  2001              MOVS     r0,#1
000012  4903              LDR      r1,|L4.32|
000014  6008              STR      r0,[r1,#0]  ; bDeviceState
                  |L4.22|
;;;115        }
;;;116        //Enable SystemCoreClock
;;;117        SystemInit();
000016  f7fffffe          BL       SystemInit
;;;118    }
00001a  bd10              POP      {r4,pc}
;;;119    
                          ENDP

                  |L4.28|
                          DCD      Device_Info
                  |L4.32|
                          DCD      bDeviceState

                          AREA ||i.USB_Cable_Ctrl||, CODE, READONLY, ALIGN=2

                  USB_Cable_Ctrl PROC
;;;154    *******************************************************************************/
;;;155    void USB_Cable_Ctrl(FunctionalState NewState)
000000  b510              PUSH     {r4,lr}
;;;156    {
000002  4604              MOV      r4,r0
;;;157        if (NewState != DISABLE) {
000004  b124              CBZ      r4,|L5.16|
;;;158            GPIO_SetBits(GPIOB, GPIO_Pin_6);
000006  2140              MOVS     r1,#0x40
000008  4804              LDR      r0,|L5.28|
00000a  f7fffffe          BL       GPIO_SetBits
00000e  e003              B        |L5.24|
                  |L5.16|
;;;159        } else {
;;;160            GPIO_ResetBits(GPIOB, GPIO_Pin_6);
000010  2140              MOVS     r1,#0x40
000012  4802              LDR      r0,|L5.28|
000014  f7fffffe          BL       GPIO_ResetBits
                  |L5.24|
;;;161        }
;;;162    }
000018  bd10              POP      {r4,pc}
;;;163    
                          ENDP

00001a  0000              DCW      0x0000
                  |L5.28|
                          DCD      0x40010c00

                          AREA ||i.USB_Clock_Config||, CODE, READONLY, ALIGN=1

                  USB_Clock_Config PROC
;;;75     *******************************************************************************/
;;;76     void USB_Clock_Config(void)
000000  b510              PUSH     {r4,lr}
;;;77     {
;;;78         /* Select USBCLK source */
;;;79         RCC_USBCLKConfig(RCC_USBCLKSource_PLLCLK_1Div5);
000002  2000              MOVS     r0,#0
000004  f7fffffe          BL       RCC_USBCLKConfig
;;;80     
;;;81         /* Enable the USB clock */
;;;82         RCC_APB1PeriphClockCmd(RCC_APB1Periph_USB, ENABLE);
000008  2101              MOVS     r1,#1
00000a  05c8              LSLS     r0,r1,#23
00000c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;83     }
000010  bd10              POP      {r4,pc}
;;;84     
                          ENDP


                          AREA ||i.USB_EXTI_Config||, CODE, READONLY, ALIGN=1

                  USB_EXTI_Config PROC
;;;191    *******************************************************************************/
;;;192    void USB_EXTI_Config(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;193    {
;;;194        EXTI_InitTypeDef EXTI_InitStructure;
;;;195    
;;;196        /* Configure the EXTI line 18 connected internally to the USB IP */
;;;197        EXTI_ClearITPendingBit(EXTI_Line18);
000002  f44f2080          MOV      r0,#0x40000
000006  f7fffffe          BL       EXTI_ClearITPendingBit
;;;198        EXTI_InitStructure.EXTI_Line = EXTI_Line18;
00000a  f44f2080          MOV      r0,#0x40000
00000e  9000              STR      r0,[sp,#0]
;;;199        EXTI_InitStructure.EXTI_Trigger = EXTI_Trigger_Rising;
000010  2008              MOVS     r0,#8
000012  f88d0005          STRB     r0,[sp,#5]
;;;200        EXTI_InitStructure.EXTI_LineCmd = ENABLE;
000016  2001              MOVS     r0,#1
000018  f88d0006          STRB     r0,[sp,#6]
;;;201        EXTI_Init(&EXTI_InitStructure);
00001c  4668              MOV      r0,sp
00001e  f7fffffe          BL       EXTI_Init
;;;202    }
000022  bd1c              POP      {r2-r4,pc}
;;;203    
                          ENDP


                          AREA ||i.USB_GPIO_Config||, CODE, READONLY, ALIGN=2

                  USB_GPIO_Config PROC
;;;170    *******************************************************************************/
;;;171    void USB_GPIO_Config(void)
000000  b508              PUSH     {r3,lr}
;;;172    {
;;;173        GPIO_InitTypeDef GPIO_InitStructure;
;;;174    
;;;175        /* Enable the USB disconnect GPIO clock */
;;;176        RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);
000002  2101              MOVS     r1,#1
000004  2008              MOVS     r0,#8
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;177    
;;;178        /* PA15 used as USB pull-up */
;;;179        GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
00000a  2040              MOVS     r0,#0x40
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;180        GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000010  2010              MOVS     r0,#0x10
000012  f88d0003          STRB     r0,[sp,#3]
;;;181        GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
000016  2002              MOVS     r0,#2
000018  f88d0002          STRB     r0,[sp,#2]
;;;182        GPIO_Init(GPIOB, &GPIO_InitStructure);
00001c  4669              MOV      r1,sp
00001e  4802              LDR      r0,|L8.40|
000020  f7fffffe          BL       GPIO_Init
;;;183    }
000024  bd08              POP      {r3,pc}
;;;184    
                          ENDP

000026  0000              DCW      0x0000
                  |L8.40|
                          DCD      0x40010c00

                          AREA ||i.USB_HW_Config||, CODE, READONLY, ALIGN=1

                  USB_HW_Config PROC
;;;53     *******************************************************************************/
;;;54     void USB_HW_Config(void)
000000  b510              PUSH     {r4,lr}
;;;55     {
;;;56         /*!< At this stage the microcontroller clock setting is already configured,
;;;57         this is done through SystemInit() function which is called from startup
;;;58         file (startup_stm32xxx.s) before to branch to application main.
;;;59         To reconfigure the default setting of SystemInit() function, refer to
;;;60         system_stm32xxx.c file
;;;61         */
;;;62     
;;;63         USB_GPIO_Config();
000002  f7fffffe          BL       USB_GPIO_Config
;;;64         USB_Interrupts_Config();
000006  f7fffffe          BL       USB_Interrupts_Config
;;;65         USB_EXTI_Config();
00000a  f7fffffe          BL       USB_EXTI_Config
;;;66         USB_Clock_Config();
00000e  f7fffffe          BL       USB_Clock_Config
;;;67     }
000012  bd10              POP      {r4,pc}
;;;68     
                          ENDP


                          AREA ||i.USB_Interrupts_Config||, CODE, READONLY, ALIGN=1

                  USB_Interrupts_Config PROC
;;;126    *******************************************************************************/
;;;127    void USB_Interrupts_Config(void)
000000  b508              PUSH     {r3,lr}
;;;128    {
;;;129        NVIC_InitTypeDef NVIC_InitStructure;
;;;130    
;;;131        /* 2 bit for pre-emption priority, 2 bits for subpriority */
;;;132        NVIC_PriorityGroupConfig(NVIC_PriorityGroup_2);
000002  f44f60a0          MOV      r0,#0x500
000006  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;133    
;;;134        /* Enable the USB interrupt */
;;;135        NVIC_InitStructure.NVIC_IRQChannel = USB_LP_CAN1_RX0_IRQn;
00000a  2014              MOVS     r0,#0x14
00000c  f88d0000          STRB     r0,[sp,#0]
;;;136        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
000010  2002              MOVS     r0,#2
000012  f88d0001          STRB     r0,[sp,#1]
;;;137        NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
000016  2000              MOVS     r0,#0
000018  f88d0002          STRB     r0,[sp,#2]
;;;138        NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
00001c  2001              MOVS     r0,#1
00001e  f88d0003          STRB     r0,[sp,#3]
;;;139        NVIC_Init(&NVIC_InitStructure);
000022  4668              MOV      r0,sp
000024  f7fffffe          BL       NVIC_Init
;;;140    
;;;141        /* Enable the USB Wake-up interrupt */
;;;142        NVIC_InitStructure.NVIC_IRQChannel = USBWakeUp_IRQn;
000028  202a              MOVS     r0,#0x2a
00002a  f88d0000          STRB     r0,[sp,#0]
;;;143        NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
00002e  2001              MOVS     r0,#1
000030  f88d0001          STRB     r0,[sp,#1]
;;;144        //NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;145        NVIC_Init(&NVIC_InitStructure);
000034  4668              MOV      r0,sp
000036  f7fffffe          BL       NVIC_Init
;;;146    }
00003a  bd08              POP      {r3,pc}
;;;147    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\usb\\hw_config.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_hw_config_c_1bdf7e80____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___11_hw_config_c_1bdf7e80____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_hw_config_c_1bdf7e80____REVSH|
#line 402
|__asm___11_hw_config_c_1bdf7e80____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_hw_config_c_1bdf7e80____RRX|
#line 587
|__asm___11_hw_config_c_1bdf7e80____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
