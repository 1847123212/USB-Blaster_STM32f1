; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\ft245rom.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\ft245rom.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\usb -I..\drv -I..\sys -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -IC:\Work\WiDSO-master\MCU\USB-Blaster\MDK-ARM\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\out\ft245rom.crf ..\src\ft245rom.c]
                          THUMB

                          AREA ||i.ft245rom_checksum||, CODE, READONLY, ALIGN=1

                  ft245rom_checksum PROC
;;;32     
;;;33     uint16_t ft245rom_checksum(const uint8_t *pbuf, uint8_t len)
000000  b530              PUSH     {r4,r5,lr}
;;;34     {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;35         size_t i;
;;;36         uint16_t checksum;
;;;37         
;;;38         checksum = 0xAAAA;
000006  f64a20aa          MOV      r0,#0xaaaa
;;;39         
;;;40         for (i = 0; i < len; i += 2) {
00000a  2100              MOVS     r1,#0
00000c  e00a              B        |L1.36|
                  |L1.14|
;;;41             checksum ^= ((uint16_t)pbuf[i + 1] << 8) | (uint16_t)pbuf[i];
00000e  5c55              LDRB     r5,[r2,r1]
000010  1c4c              ADDS     r4,r1,#1
000012  5d14              LDRB     r4,[r2,r4]
000014  ea452404          ORR      r4,r5,r4,LSL #8
000018  4060              EORS     r0,r0,r4
;;;42             checksum = (checksum << 1) | (checksum >> 15);
00001a  0044              LSLS     r4,r0,#1
00001c  ea4434e0          ORR      r4,r4,r0,ASR #15
000020  b2a0              UXTH     r0,r4
000022  1c89              ADDS     r1,r1,#2              ;40
                  |L1.36|
000024  4299              CMP      r1,r3                 ;40
000026  d3f2              BCC      |L1.14|
;;;43         }
;;;44     
;;;45         return checksum;
;;;46     }
000028  bd30              POP      {r4,r5,pc}
;;;47     
                          ENDP


                          AREA ||i.ft245rom_init||, CODE, READONLY, ALIGN=2

                  ft245rom_init PROC
;;;47     
;;;48     int ft245rom_init(void)
000000  b5f0              PUSH     {r4-r7,lr}
;;;49     {
;;;50         size_t i;
;;;51         uint8_t offset = 0;
000002  2600              MOVS     r6,#0
;;;52         uint16_t checksum;
;;;53         uint8_t *pbuf = s_ft245rom_buf;
000004  4c4f              LDR      r4,|L2.324|
;;;54     
;;;55         if (Blaster_StringVendor[0] + Blaster_StringProduct[0] + Blaster_StringSerial[0] > FT245ROM_STR_LIMIT) {
000006  4850              LDR      r0,|L2.328|
000008  7800              LDRB     r0,[r0,#0]  ; Blaster_StringVendor
00000a  4950              LDR      r1,|L2.332|
00000c  7809              LDRB     r1,[r1,#0]  ; Blaster_StringProduct
00000e  4408              ADD      r0,r0,r1
000010  494f              LDR      r1,|L2.336|
000012  7809              LDRB     r1,[r1,#0]  ; Blaster_StringSerial
000014  4408              ADD      r0,r0,r1
000016  2864              CMP      r0,#0x64
000018  dd01              BLE      |L2.30|
;;;56             return -1;
00001a  1e70              SUBS     r0,r6,#1
                  |L2.28|
;;;57         }
;;;58     
;;;59         *pbuf++ = 0x0;
;;;60         *pbuf++ = 0x0;
;;;61         for (i = 0; i < 6; i++) {
;;;62             *pbuf++ = Blaster_DeviceDescriptor[8 + i];  // vid/pid/ver
;;;63         }
;;;64         *pbuf++ = Blaster_ConfigDescriptor[7];  // attr
;;;65         *pbuf++ = Blaster_ConfigDescriptor[8];  // pwr
;;;66         *pbuf++ = 0x1C;                         // chip config
;;;67         *pbuf++ = 0x00;
;;;68         *pbuf++ = Blaster_DeviceDescriptor[2];  // usb ver
;;;69         *pbuf++ = Blaster_DeviceDescriptor[3];  // usb ver
;;;70     
;;;71         // strings offset and length
;;;72         offset = 0x80 | (pbuf - s_ft245rom_buf + 2 * 3);
;;;73         *pbuf++ = offset;
;;;74         *pbuf++ = Blaster_StringVendor[0];
;;;75         offset += Blaster_StringVendor[0];
;;;76         *pbuf++ = offset;
;;;77         *pbuf++ = Blaster_StringProduct[0];
;;;78         offset += Blaster_StringProduct[0];
;;;79         *pbuf++ = offset;
;;;80         *pbuf++ = Blaster_StringSerial[0];
;;;81     
;;;82         for (i = 0; i < Blaster_StringVendor[0]; i++) {
;;;83             *pbuf++ = Blaster_StringVendor[i];  // vendor string
;;;84         }
;;;85         for (i = 0; i < Blaster_StringProduct[0]; i++) {
;;;86             *pbuf++ = Blaster_StringProduct[i]; // product string
;;;87         }
;;;88         for (i = 0; i < Blaster_StringSerial[0]; i++) {
;;;89             *pbuf++ = Blaster_StringSerial[i];  // serial string
;;;90         }
;;;91         
;;;92         *pbuf++ = 0x2;
;;;93         *pbuf++ = 0x3;
;;;94         *pbuf++ = 0x1;
;;;95         *pbuf++ = 0x0;
;;;96         
;;;97         *pbuf++ = 'R';
;;;98         *pbuf++ = 'E';
;;;99         *pbuf++ = 'V';
;;;100        *pbuf++ = 'B';
;;;101    
;;;102        // fill zeros
;;;103        while ((pbuf - s_ft245rom_buf) < (FT245ROM_SIZE - 2)) {
;;;104            *pbuf++ = 0x0;
;;;105        }
;;;106    
;;;107        // checksum
;;;108        checksum = ft245rom_checksum(s_ft245rom_buf, FT245ROM_SIZE - 2);
;;;109        *pbuf++ = checksum & 0xFF;
;;;110        *pbuf++ = (checksum >> 8) & 0xFF;
;;;111    
;;;112        return 0;
;;;113    }
00001c  bdf0              POP      {r4-r7,pc}
                  |L2.30|
00001e  2000              MOVS     r0,#0                 ;59
000020  f8040b01          STRB     r0,[r4],#1            ;59
000024  f8040b01          STRB     r0,[r4],#1            ;60
000028  2500              MOVS     r5,#0                 ;61
00002a  e006              B        |L2.58|
                  |L2.44|
00002c  f1050008          ADD      r0,r5,#8              ;62
000030  4948              LDR      r1,|L2.340|
000032  5c08              LDRB     r0,[r1,r0]            ;62
000034  f8040b01          STRB     r0,[r4],#1            ;62
000038  1c6d              ADDS     r5,r5,#1              ;61
                  |L2.58|
00003a  2d06              CMP      r5,#6                 ;61
00003c  d3f6              BCC      |L2.44|
00003e  4846              LDR      r0,|L2.344|
000040  79c0              LDRB     r0,[r0,#7]            ;64  ; Blaster_ConfigDescriptor
000042  f8040b01          STRB     r0,[r4],#1            ;64
000046  4844              LDR      r0,|L2.344|
000048  7a00              LDRB     r0,[r0,#8]            ;65  ; Blaster_ConfigDescriptor
00004a  f8040b01          STRB     r0,[r4],#1            ;65
00004e  201c              MOVS     r0,#0x1c              ;66
000050  f8040b01          STRB     r0,[r4],#1            ;66
000054  2000              MOVS     r0,#0                 ;67
000056  f8040b01          STRB     r0,[r4],#1            ;67
00005a  483e              LDR      r0,|L2.340|
00005c  7880              LDRB     r0,[r0,#2]            ;68  ; Blaster_DeviceDescriptor
00005e  f8040b01          STRB     r0,[r4],#1            ;68
000062  483c              LDR      r0,|L2.340|
000064  78c0              LDRB     r0,[r0,#3]            ;69  ; Blaster_DeviceDescriptor
000066  f8040b01          STRB     r0,[r4],#1            ;69
00006a  4836              LDR      r0,|L2.324|
00006c  1a20              SUBS     r0,r4,r0              ;72
00006e  1d80              ADDS     r0,r0,#6              ;72
000070  b2c0              UXTB     r0,r0                 ;72
000072  f0400680          ORR      r6,r0,#0x80           ;72
000076  f8046b01          STRB     r6,[r4],#1            ;73
00007a  4833              LDR      r0,|L2.328|
00007c  7800              LDRB     r0,[r0,#0]            ;74  ; Blaster_StringVendor
00007e  f8040b01          STRB     r0,[r4],#1            ;74
000082  4831              LDR      r0,|L2.328|
000084  7800              LDRB     r0,[r0,#0]            ;75  ; Blaster_StringVendor
000086  4430              ADD      r0,r0,r6              ;75
000088  b2c6              UXTB     r6,r0                 ;75
00008a  f8046b01          STRB     r6,[r4],#1            ;76
00008e  482f              LDR      r0,|L2.332|
000090  7800              LDRB     r0,[r0,#0]            ;77  ; Blaster_StringProduct
000092  f8040b01          STRB     r0,[r4],#1            ;77
000096  482d              LDR      r0,|L2.332|
000098  7800              LDRB     r0,[r0,#0]            ;78  ; Blaster_StringProduct
00009a  4430              ADD      r0,r0,r6              ;78
00009c  b2c6              UXTB     r6,r0                 ;78
00009e  f8046b01          STRB     r6,[r4],#1            ;79
0000a2  482b              LDR      r0,|L2.336|
0000a4  7800              LDRB     r0,[r0,#0]            ;80  ; Blaster_StringSerial
0000a6  f8040b01          STRB     r0,[r4],#1            ;80
0000aa  2500              MOVS     r5,#0                 ;82
0000ac  e004              B        |L2.184|
                  |L2.174|
0000ae  4826              LDR      r0,|L2.328|
0000b0  5d40              LDRB     r0,[r0,r5]            ;83
0000b2  f8040b01          STRB     r0,[r4],#1            ;83
0000b6  1c6d              ADDS     r5,r5,#1              ;82
                  |L2.184|
0000b8  4823              LDR      r0,|L2.328|
0000ba  7800              LDRB     r0,[r0,#0]            ;82  ; Blaster_StringVendor
0000bc  42a8              CMP      r0,r5                 ;82
0000be  d8f6              BHI      |L2.174|
0000c0  2500              MOVS     r5,#0                 ;85
0000c2  e004              B        |L2.206|
                  |L2.196|
0000c4  4821              LDR      r0,|L2.332|
0000c6  5d40              LDRB     r0,[r0,r5]            ;86
0000c8  f8040b01          STRB     r0,[r4],#1            ;86
0000cc  1c6d              ADDS     r5,r5,#1              ;85
                  |L2.206|
0000ce  481f              LDR      r0,|L2.332|
0000d0  7800              LDRB     r0,[r0,#0]            ;85  ; Blaster_StringProduct
0000d2  42a8              CMP      r0,r5                 ;85
0000d4  d8f6              BHI      |L2.196|
0000d6  2500              MOVS     r5,#0                 ;88
0000d8  e004              B        |L2.228|
                  |L2.218|
0000da  481d              LDR      r0,|L2.336|
0000dc  5d40              LDRB     r0,[r0,r5]            ;89
0000de  f8040b01          STRB     r0,[r4],#1            ;89
0000e2  1c6d              ADDS     r5,r5,#1              ;88
                  |L2.228|
0000e4  481a              LDR      r0,|L2.336|
0000e6  7800              LDRB     r0,[r0,#0]            ;88  ; Blaster_StringSerial
0000e8  42a8              CMP      r0,r5                 ;88
0000ea  d8f6              BHI      |L2.218|
0000ec  2002              MOVS     r0,#2                 ;92
0000ee  f8040b01          STRB     r0,[r4],#1            ;92
0000f2  2003              MOVS     r0,#3                 ;93
0000f4  f8040b01          STRB     r0,[r4],#1            ;93
0000f8  2001              MOVS     r0,#1                 ;94
0000fa  f8040b01          STRB     r0,[r4],#1            ;94
0000fe  2000              MOVS     r0,#0                 ;95
000100  f8040b01          STRB     r0,[r4],#1            ;95
000104  2052              MOVS     r0,#0x52              ;97
000106  f8040b01          STRB     r0,[r4],#1            ;97
00010a  2045              MOVS     r0,#0x45              ;98
00010c  f8040b01          STRB     r0,[r4],#1            ;98
000110  2056              MOVS     r0,#0x56              ;99
000112  f8040b01          STRB     r0,[r4],#1            ;99
000116  2042              MOVS     r0,#0x42              ;100
000118  f8040b01          STRB     r0,[r4],#1            ;100
00011c  e002              B        |L2.292|
                  |L2.286|
00011e  2000              MOVS     r0,#0                 ;104
000120  f8040b01          STRB     r0,[r4],#1            ;104
                  |L2.292|
000124  4807              LDR      r0,|L2.324|
000126  1a20              SUBS     r0,r4,r0              ;103
000128  287e              CMP      r0,#0x7e              ;103
00012a  dbf8              BLT      |L2.286|
00012c  217e              MOVS     r1,#0x7e              ;108
00012e  4805              LDR      r0,|L2.324|
000130  f7fffffe          BL       ft245rom_checksum
000134  4607              MOV      r7,r0                 ;108
000136  f8047b01          STRB     r7,[r4],#1            ;109
00013a  0a38              LSRS     r0,r7,#8              ;110
00013c  f8040b01          STRB     r0,[r4],#1            ;110
000140  2000              MOVS     r0,#0                 ;112
000142  e76b              B        |L2.28|
;;;114    
                          ENDP

                  |L2.324|
                          DCD      s_ft245rom_buf
                  |L2.328|
                          DCD      Blaster_StringVendor
                  |L2.332|
                          DCD      Blaster_StringProduct
                  |L2.336|
                          DCD      Blaster_StringSerial
                  |L2.340|
                          DCD      Blaster_DeviceDescriptor
                  |L2.344|
                          DCD      Blaster_ConfigDescriptor

                          AREA ||i.ft245rom_read||, CODE, READONLY, ALIGN=2

                  ft245rom_read PROC
;;;114    
;;;115    uint16_t ft245rom_read(uint8_t addr)
000000  4601              MOV      r1,r0
;;;116    {
;;;117        return ((uint16_t)s_ft245rom_buf[addr + 1] << 8) | s_ft245rom_buf[addr];
000002  4804              LDR      r0,|L3.20|
000004  5c42              LDRB     r2,[r0,r1]
000006  4603              MOV      r3,r0
000008  1c48              ADDS     r0,r1,#1
00000a  5c18              LDRB     r0,[r3,r0]
00000c  ea422000          ORR      r0,r2,r0,LSL #8
;;;118    }
000010  4770              BX       lr
                          ENDP

000012  0000              DCW      0x0000
                  |L3.20|
                          DCD      s_ft245rom_buf

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  s_ft245rom_buf
                          %        128

;*** Start embedded assembler ***

#line 1 "..\\src\\ft245rom.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_ft245rom_c_e38617f7____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_ft245rom_c_e38617f7____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_ft245rom_c_e38617f7____REVSH|
#line 402
|__asm___10_ft245rom_c_e38617f7____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_ft245rom_c_e38617f7____RRX|
#line 587
|__asm___10_ft245rom_c_e38617f7____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
