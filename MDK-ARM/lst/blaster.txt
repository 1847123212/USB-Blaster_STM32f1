; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\blaster.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\blaster.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\usb -I..\drv -I..\sys -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -IC:\Work\WiDSO-master\MCU\USB-Blaster\MDK-ARM\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\out\blaster.crf ..\src\blaster.c]
                          THUMB

                          AREA ||i.blaster_exec||, CODE, READONLY, ALIGN=1

                  blaster_exec PROC
;;;199    
;;;200    void blaster_exec(void)
000000  b510              PUSH     {r4,lr}
;;;201    {
;;;202        blaster_usbrecv();
000002  f7fffffe          BL       blaster_usbrecv
;;;203        blaster_ioproc();
000006  f7fffffe          BL       blaster_ioproc
;;;204        blaster_usbsend();
00000a  f7fffffe          BL       blaster_usbsend
;;;205    }
00000e  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.blaster_init||, CODE, READONLY, ALIGN=2

                  blaster_init PROC
;;;175    
;;;176    void blaster_init(void)
000000  b510              PUSH     {r4,lr}
;;;177    {
;;;178        g_blaster_rx_req = FALSE;
000002  2000              MOVS     r0,#0
000004  4911              LDR      r1,|L2.76|
000006  7008              STRB     r0,[r1,#0]
;;;179        g_blaster_tx_ready = TRUE;
000008  2001              MOVS     r0,#1
00000a  4911              LDR      r1,|L2.80|
00000c  7008              STRB     r0,[r1,#0]
;;;180    
;;;181        s_blaster_shift_cnt = 0;
00000e  2000              MOVS     r0,#0
000010  4910              LDR      r1,|L2.84|
000012  6008              STR      r0,[r1,#0]  ; s_blaster_shift_cnt
;;;182        s_blaster_shift_en = FALSE;
000014  4910              LDR      r1,|L2.88|
000016  7008              STRB     r0,[r1,#0]
;;;183        s_blaster_read_en = FALSE;
000018  4910              LDR      r1,|L2.92|
00001a  7008              STRB     r0,[r1,#0]
;;;184    
;;;185        s_blaster_sendtime = 0;
00001c  4910              LDR      r1,|L2.96|
00001e  6008              STR      r0,[r1,#0]  ; s_blaster_sendtime
;;;186        s_blaster_senddummy = TRUE;
000020  2001              MOVS     r0,#1
000022  4910              LDR      r1,|L2.100|
000024  7008              STRB     r0,[r1,#0]
;;;187        
;;;188        s_recv_buff_len = 0;
000026  2000              MOVS     r0,#0
000028  490f              LDR      r1,|L2.104|
00002a  6008              STR      r0,[r1,#0]  ; s_recv_buff_len
;;;189        s_recv_buff_idx = 0;
00002c  490f              LDR      r1,|L2.108|
00002e  6008              STR      r0,[r1,#0]  ; s_recv_buff_idx
;;;190    
;;;191        // first two bytes are modem status
;;;192        s_send_packet_buff[0] = FTDI_MODEM_STA_DUMMY0;
000030  2001              MOVS     r0,#1
000032  490f              LDR      r1,|L2.112|
000034  7008              STRB     r0,[r1,#0]
;;;193        s_send_packet_buff[1] = FTDI_MODEM_STA_DUMMY1;
000036  2060              MOVS     r0,#0x60
000038  7048              STRB     r0,[r1,#1]
;;;194    
;;;195        ringbuf_init(&s_send_ring_buff, s_send_buffer, sizeof(s_send_buffer));
00003a  2240              MOVS     r2,#0x40
00003c  490d              LDR      r1,|L2.116|
00003e  480e              LDR      r0,|L2.120|
000040  f7fffffe          BL       ringbuf_init
;;;196    
;;;197        bport_init();
000044  f7fffffe          BL       bport_init
;;;198    }
000048  bd10              POP      {r4,pc}
;;;199    
                          ENDP

00004a  0000              DCW      0x0000
                  |L2.76|
                          DCD      g_blaster_rx_req
                  |L2.80|
                          DCD      g_blaster_tx_ready
                  |L2.84|
                          DCD      s_blaster_shift_cnt
                  |L2.88|
                          DCD      s_blaster_shift_en
                  |L2.92|
                          DCD      s_blaster_read_en
                  |L2.96|
                          DCD      s_blaster_sendtime
                  |L2.100|
                          DCD      s_blaster_senddummy
                  |L2.104|
                          DCD      s_recv_buff_len
                  |L2.108|
                          DCD      s_recv_buff_idx
                  |L2.112|
                          DCD      s_send_packet_buff
                  |L2.116|
                          DCD      s_send_buffer
                  |L2.120|
                          DCD      s_send_ring_buff

                          AREA ||i.blaster_ioproc||, CODE, READONLY, ALIGN=2

                  blaster_ioproc PROC
;;;139    
;;;140    static void blaster_ioproc(void)
000000  b510              PUSH     {r4,lr}
;;;141    {
;;;142        uint8_t d;
;;;143    
;;;144        while ((s_recv_buff_idx < s_recv_buff_len) && !ringbuf_is_full(&s_send_ring_buff)) {
000002  e049              B        |L3.152|
                  |L3.4|
;;;145            d = s_recv_buffer[s_recv_buff_idx];
000004  482a              LDR      r0,|L3.176|
000006  492b              LDR      r1,|L3.180|
000008  6809              LDR      r1,[r1,#0]  ; s_recv_buff_idx
00000a  5c44              LDRB     r4,[r0,r1]
;;;146            if (0 == s_blaster_shift_cnt) {
00000c  482a              LDR      r0,|L3.184|
00000e  6800              LDR      r0,[r0,#0]  ; s_blaster_shift_cnt
000010  bb48              CBNZ     r0,|L3.102|
;;;147                // bit-bang mode (default)
;;;148                s_blaster_shift_en = (0 != (d & BLASTER_STA_SHIFT));
000012  f0040080          AND      r0,r4,#0x80
000016  b108              CBZ      r0,|L3.28|
000018  2001              MOVS     r0,#1
00001a  e000              B        |L3.30|
                  |L3.28|
00001c  2000              MOVS     r0,#0
                  |L3.30|
00001e  4927              LDR      r1,|L3.188|
000020  7008              STRB     r0,[r1,#0]
;;;149                s_blaster_read_en = (0 != (d & BLASTER_STA_READ));
000022  f0040040          AND      r0,r4,#0x40
000026  b108              CBZ      r0,|L3.44|
000028  2001              MOVS     r0,#1
00002a  e000              B        |L3.46|
                  |L3.44|
00002c  2000              MOVS     r0,#0
                  |L3.46|
00002e  4924              LDR      r1,|L3.192|
000030  7008              STRB     r0,[r1,#0]
;;;150                if (s_blaster_shift_en) {
000032  4822              LDR      r0,|L3.188|
000034  7800              LDRB     r0,[r0,#0]  ; s_blaster_shift_en
000036  b120              CBZ      r0,|L3.66|
;;;151                    s_blaster_shift_cnt = (d & BLASTER_STA_CNT_MASK);
000038  f004003f          AND      r0,r4,#0x3f
00003c  491e              LDR      r1,|L3.184|
00003e  6008              STR      r0,[r1,#0]  ; s_blaster_shift_cnt
000040  e025              B        |L3.142|
                  |L3.66|
;;;152                } else if (s_blaster_read_en)  {
000042  481f              LDR      r0,|L3.192|
000044  7800              LDRB     r0,[r0,#0]  ; s_blaster_read_en
000046  b150              CBZ      r0,|L3.94|
;;;153                    bport_state_set(d);
000048  4620              MOV      r0,r4
00004a  f7fffffe          BL       bport_state_set
;;;154                    d = bport_state_get();
00004e  f7fffffe          BL       bport_state_get
000052  4604              MOV      r4,r0
;;;155                    ringbuf_putc(&s_send_ring_buff, d);
000054  4621              MOV      r1,r4
000056  481b              LDR      r0,|L3.196|
000058  f7fffffe          BL       ringbuf_putc
00005c  e017              B        |L3.142|
                  |L3.94|
;;;156                } else {
;;;157                    bport_state_set(d);
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       bport_state_set
000064  e013              B        |L3.142|
                  |L3.102|
;;;158                }
;;;159            } else {
;;;160                // shift mode
;;;161                if (s_blaster_read_en) {
000066  4816              LDR      r0,|L3.192|
000068  7800              LDRB     r0,[r0,#0]  ; s_blaster_read_en
00006a  b140              CBZ      r0,|L3.126|
;;;162                    d = bport_shift_io(d);
00006c  4620              MOV      r0,r4
00006e  f7fffffe          BL       bport_shift_io
000072  4604              MOV      r4,r0
;;;163                    ringbuf_putc(&s_send_ring_buff, d);
000074  4621              MOV      r1,r4
000076  4813              LDR      r0,|L3.196|
000078  f7fffffe          BL       ringbuf_putc
00007c  e002              B        |L3.132|
                  |L3.126|
;;;164                } else {
;;;165                    bport_shift_out(d);
00007e  4620              MOV      r0,r4
000080  f7fffffe          BL       bport_shift_out
                  |L3.132|
;;;166                }
;;;167                s_blaster_shift_cnt--;
000084  480c              LDR      r0,|L3.184|
000086  6800              LDR      r0,[r0,#0]  ; s_blaster_shift_cnt
000088  1e40              SUBS     r0,r0,#1
00008a  490b              LDR      r1,|L3.184|
00008c  6008              STR      r0,[r1,#0]  ; s_blaster_shift_cnt
                  |L3.142|
;;;168            }
;;;169            
;;;170            s_recv_buff_idx++;
00008e  4809              LDR      r0,|L3.180|
000090  6800              LDR      r0,[r0,#0]  ; s_recv_buff_idx
000092  1c40              ADDS     r0,r0,#1
000094  4907              LDR      r1,|L3.180|
000096  6008              STR      r0,[r1,#0]  ; s_recv_buff_idx
                  |L3.152|
000098  4806              LDR      r0,|L3.180|
00009a  6800              LDR      r0,[r0,#0]            ;144  ; s_recv_buff_idx
00009c  490a              LDR      r1,|L3.200|
00009e  6809              LDR      r1,[r1,#0]            ;144  ; s_recv_buff_len
0000a0  4288              CMP      r0,r1                 ;144
0000a2  d204              BCS      |L3.174|
0000a4  4807              LDR      r0,|L3.196|
0000a6  f7fffffe          BL       ringbuf_is_full
0000aa  2800              CMP      r0,#0                 ;144
0000ac  d0aa              BEQ      |L3.4|
                  |L3.174|
;;;171        }
;;;172    }
0000ae  bd10              POP      {r4,pc}
;;;173    
                          ENDP

                  |L3.176|
                          DCD      s_recv_buffer
                  |L3.180|
                          DCD      s_recv_buff_idx
                  |L3.184|
                          DCD      s_blaster_shift_cnt
                  |L3.188|
                          DCD      s_blaster_shift_en
                  |L3.192|
                          DCD      s_blaster_read_en
                  |L3.196|
                          DCD      s_send_ring_buff
                  |L3.200|
                          DCD      s_recv_buff_len

                          AREA ||i.blaster_usbrecv||, CODE, READONLY, ALIGN=2

                  blaster_usbrecv PROC
;;;71     
;;;72     static void blaster_usbrecv(void)
000000  b510              PUSH     {r4,lr}
;;;73     {
;;;74         uint16_t len;
;;;75         
;;;76         if (!g_blaster_rx_req) {
000002  4819              LDR      r0,|L4.104|
000004  7800              LDRB     r0,[r0,#0]  ; g_blaster_rx_req
000006  b900              CBNZ     r0,|L4.10|
                  |L4.8|
;;;77             return;
;;;78         }
;;;79     
;;;80         if (s_recv_buff_idx != s_recv_buff_len) {
;;;81             return;
;;;82         }
;;;83         
;;;84         if (GetENDPOINT(ENDP2) & EP_DTOG_TX) {
;;;85             /* read from buffer 0 */
;;;86             len = GetEPDblBuf0Count(ENDP2);
;;;87             PMAToUserBufferCopy(s_recv_buffer, ENDP2_RXADDR0, len);
;;;88         } else {
;;;89             /* read from buffer 1 */
;;;90             len = GetEPDblBuf1Count(ENDP2);
;;;91             PMAToUserBufferCopy(s_recv_buffer, ENDP2_RXADDR1, len);
;;;92         }
;;;93         s_recv_buff_len = len;
;;;94         s_recv_buff_idx = 0;
;;;95         g_blaster_rx_req = FALSE;
;;;96         FreeUserBuffer(ENDP2, EP_DBUF_OUT);
;;;97     }
000008  bd10              POP      {r4,pc}
                  |L4.10|
00000a  4818              LDR      r0,|L4.108|
00000c  6800              LDR      r0,[r0,#0]            ;80  ; s_recv_buff_idx
00000e  4918              LDR      r1,|L4.112|
000010  6809              LDR      r1,[r1,#0]            ;80  ; s_recv_buff_len
000012  4288              CMP      r0,r1                 ;80
000014  d000              BEQ      |L4.24|
000016  e7f7              B        |L4.8|
                  |L4.24|
000018  2002              MOVS     r0,#2                 ;84
00001a  f7fffffe          BL       GetENDPOINT
00001e  f0000040          AND      r0,r0,#0x40           ;84
000022  b150              CBZ      r0,|L4.58|
000024  2002              MOVS     r0,#2                 ;86
000026  f7fffffe          BL       GetEPDblBuf0Count
00002a  4604              MOV      r4,r0                 ;86
00002c  4622              MOV      r2,r4                 ;87
00002e  f44f7180          MOV      r1,#0x100             ;87
000032  4810              LDR      r0,|L4.116|
000034  f7fffffe          BL       PMAToUserBufferCopy
000038  e009              B        |L4.78|
                  |L4.58|
00003a  2002              MOVS     r0,#2                 ;90
00003c  f7fffffe          BL       GetEPDblBuf1Count
000040  4604              MOV      r4,r0                 ;90
000042  4622              MOV      r2,r4                 ;91
000044  f44f71a0          MOV      r1,#0x140             ;91
000048  480a              LDR      r0,|L4.116|
00004a  f7fffffe          BL       PMAToUserBufferCopy
                  |L4.78|
00004e  4808              LDR      r0,|L4.112|
000050  6004              STR      r4,[r0,#0]            ;93  ; s_recv_buff_len
000052  2000              MOVS     r0,#0                 ;94
000054  4905              LDR      r1,|L4.108|
000056  6008              STR      r0,[r1,#0]            ;94  ; s_recv_buff_idx
000058  4903              LDR      r1,|L4.104|
00005a  7008              STRB     r0,[r1,#0]            ;95
00005c  2101              MOVS     r1,#1                 ;96
00005e  2002              MOVS     r0,#2                 ;96
000060  f7fffffe          BL       FreeUserBuffer
000064  bf00              NOP      
000066  e7cf              B        |L4.8|
;;;98     
                          ENDP

                  |L4.104|
                          DCD      g_blaster_rx_req
                  |L4.108|
                          DCD      s_recv_buff_idx
                  |L4.112|
                          DCD      s_recv_buff_len
                  |L4.116|
                          DCD      s_recv_buffer

                          AREA ||i.blaster_usbsend||, CODE, READONLY, ALIGN=2

                  blaster_usbsend PROC
;;;98     
;;;99     static void blaster_usbsend(void)
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101        uint32_t send_len;
;;;102    
;;;103        if (!g_blaster_tx_ready) {
000002  4819              LDR      r0,|L5.104|
000004  7800              LDRB     r0,[r0,#0]  ; g_blaster_tx_ready
000006  b900              CBNZ     r0,|L5.10|
                  |L5.8|
;;;104            return;
;;;105        }
;;;106    
;;;107        send_len = ringbuf_use_len(&s_send_ring_buff);
;;;108        if (send_len > SEND_PACKET_VALID_SIZE) {
;;;109            // send full packet
;;;110            send_len = SEND_PACKET_VALID_SIZE;
;;;111        } else if (0 == send_len) {
;;;112            if (millis() - s_blaster_sendtime >= BLASTER_HEARTBEAT_TIME) {
;;;113                // send heart beat packet
;;;114            } else if (s_blaster_senddummy) {
;;;115                // send dummy packet
;;;116                s_blaster_senddummy = FALSE;
;;;117            } else {
;;;118                // nothing to send
;;;119                return;
;;;120            }
;;;121        } else {
;;;122            // send not full packet
;;;123        }
;;;124    
;;;125        s_blaster_sendtime = millis();
;;;126    
;;;127        ringbuf_get(&s_send_ring_buff, &s_send_packet_buff[FTDI_MODEM_STA_SIZE], send_len);
;;;128        
;;;129        /* Reset the control token to inform upper layer that a transfer is ongoing */
;;;130        g_blaster_tx_ready = FALSE;
;;;131        
;;;132        /* Copy data to ENDP1 Tx Packet Memory Area*/
;;;133        USB_SIL_Write(EP1_IN, s_send_packet_buff, FTDI_MODEM_STA_SIZE + send_len);
;;;134        /* Enable endpoint for transmission */
;;;135        SetEPTxValid(ENDP1);
;;;136    }
000008  bd10              POP      {r4,pc}
                  |L5.10|
00000a  4818              LDR      r0,|L5.108|
00000c  f7fffffe          BL       ringbuf_use_len
000010  4604              MOV      r4,r0                 ;107
000012  2c3e              CMP      r4,#0x3e              ;108
000014  d901              BLS      |L5.26|
000016  243e              MOVS     r4,#0x3e              ;110
000018  e00f              B        |L5.58|
                  |L5.26|
00001a  b974              CBNZ     r4,|L5.58|
00001c  f7fffffe          BL       millis
000020  4913              LDR      r1,|L5.112|
000022  6809              LDR      r1,[r1,#0]            ;112  ; s_blaster_sendtime
000024  1a40              SUBS     r0,r0,r1              ;112
000026  280a              CMP      r0,#0xa               ;112
000028  d207              BCS      |L5.58|
00002a  4812              LDR      r0,|L5.116|
00002c  7800              LDRB     r0,[r0,#0]            ;114  ; s_blaster_senddummy
00002e  b118              CBZ      r0,|L5.56|
000030  2000              MOVS     r0,#0                 ;116
000032  4910              LDR      r1,|L5.116|
000034  7008              STRB     r0,[r1,#0]            ;116
000036  e000              B        |L5.58|
                  |L5.56|
000038  e7e6              B        |L5.8|
                  |L5.58|
00003a  f7fffffe          BL       millis
00003e  490c              LDR      r1,|L5.112|
000040  6008              STR      r0,[r1,#0]            ;125  ; s_blaster_sendtime
000042  4622              MOV      r2,r4                 ;127
000044  490c              LDR      r1,|L5.120|
000046  4809              LDR      r0,|L5.108|
000048  f7fffffe          BL       ringbuf_get
00004c  2000              MOVS     r0,#0                 ;130
00004e  4906              LDR      r1,|L5.104|
000050  7008              STRB     r0,[r1,#0]            ;130
000052  1ca2              ADDS     r2,r4,#2              ;133
000054  4908              LDR      r1,|L5.120|
000056  1e89              SUBS     r1,r1,#2              ;133
000058  2081              MOVS     r0,#0x81              ;133
00005a  f7fffffe          BL       USB_SIL_Write
00005e  2001              MOVS     r0,#1                 ;135
000060  f7fffffe          BL       SetEPTxValid
000064  bf00              NOP      
000066  e7cf              B        |L5.8|
;;;137    
                          ENDP

                  |L5.104|
                          DCD      g_blaster_tx_ready
                  |L5.108|
                          DCD      s_send_ring_buff
                  |L5.112|
                          DCD      s_blaster_sendtime
                  |L5.116|
                          DCD      s_blaster_senddummy
                  |L5.120|
                          DCD      s_send_packet_buff+0x2

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  s_recv_buffer
                          %        64
                  s_send_buffer
                          %        64
                  s_send_packet_buff
                          %        64
                  s_send_ring_buff
                          %        16

                          AREA ||.data||, DATA, ALIGN=2

                  g_blaster_rx_req
000000  00                DCB      0x00
                  g_blaster_tx_ready
000001  010000            DCB      0x01,0x00,0x00
                  s_recv_buff_len
                          DCD      0x00000000
                  s_recv_buff_idx
                          DCD      0x00000000
                  s_blaster_shift_cnt
                          DCD      0x00000000
                  s_blaster_shift_en
000010  00                DCB      0x00
                  s_blaster_read_en
000011  000000            DCB      0x00,0x00,0x00
                  s_blaster_sendtime
                          DCD      0x00000000
                  s_blaster_senddummy
000018  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\src\\blaster.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___9_blaster_c_79bab140____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___9_blaster_c_79bab140____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___9_blaster_c_79bab140____REVSH|
#line 402
|__asm___9_blaster_c_79bab140____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___9_blaster_c_79bab140____RRX|
#line 587
|__asm___9_blaster_c_79bab140____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
