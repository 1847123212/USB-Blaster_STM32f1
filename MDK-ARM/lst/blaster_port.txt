; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\blaster_port.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\blaster_port.d --cpu=Cortex-M3 --apcs=interwork -O3 -Otime --diag_suppress=9931 -I..\src -I..\usb -I..\drv -I..\sys -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -IC:\Work\WiDSO-master\MCU\USB-Blaster\MDK-ARM\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\out\blaster_port.crf ..\src\blaster_port.c]
                          THUMB

                          AREA ||i.bport_init||, CODE, READONLY, ALIGN=2

                  bport_init PROC
;;;71     
;;;72     void bport_init(void)
000000  b538              PUSH     {r3-r5,lr}
;;;73     {
;;;74         GPIO_InitTypeDef GPIO_InitStructure;
;;;75     
;;;76         RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA, ENABLE);
000002  2101              MOVS     r1,#1
000004  2004              MOVS     r0,#4
000006  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;77     
;;;78         // GPIO Out Configuration: TCK(PB3), TDI(PB5), TMS(PB6)
;;;79         GPIO_InitStructure.GPIO_Pin =  GPIO_Pin_0 | GPIO_Pin_4 | GPIO_Pin_1;
00000a  2013              MOVS     r0,#0x13
00000c  f8ad0000          STRH     r0,[sp,#0]
;;;80         GPIO_InitStructure.GPIO_Speed = GPIO_Speed_10MHz;
000010  2001              MOVS     r0,#1
000012  f88d0002          STRB     r0,[sp,#2]
;;;81         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
000016  2010              MOVS     r0,#0x10
;;;82         GPIO_Init(GPIOA, &GPIO_InitStructure);
000018  4c08              LDR      r4,|L1.60|
00001a  f88d0003          STRB     r0,[sp,#3]            ;81
00001e  4669              MOV      r1,sp
000020  4620              MOV      r0,r4
000022  f7fffffe          BL       GPIO_Init
;;;83     
;;;84         // GPIO In Configuration: TDO(PB4)
;;;85         GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
000026  2040              MOVS     r0,#0x40
000028  f8ad0000          STRH     r0,[sp,#0]
;;;86         GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IPU;
00002c  2048              MOVS     r0,#0x48
00002e  f88d0003          STRB     r0,[sp,#3]
;;;87         GPIO_Init(GPIOA, &GPIO_InitStructure);
000032  4669              MOV      r1,sp
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       GPIO_Init
;;;88     
;;;89     #ifdef BLASTER_OE_LED_EN
;;;90         // led(OE) pin already init in led.c
;;;91     #endif
;;;92     
;;;93     #ifdef BLASTER_AS_MODE_EN
;;;94         // init AS mode pins here (nCS/nCE/DATAOUT)
;;;95     #endif
;;;96     }
00003a  bd38              POP      {r3-r5,pc}
;;;97     
                          ENDP

                  |L1.60|
                          DCD      0x40010800

                          AREA ||i.bport_shift_io||, CODE, READONLY, ALIGN=2

                  bport_shift_io PROC
;;;143    // shift mode input
;;;144    uint8_t bport_shift_io(uint8_t d)
000000  492e              LDR      r1,|L2.188|
;;;145    {
;;;146        uint32_t dshift = d;
;;;147        uint32_t din;
;;;148        
;;;149    #ifdef BLASTER_AS_MODE_EN
;;;150    #define BPORT_SHIFT_BIT()    TDI_OUT(dshift); din = DATAOUT_IN(); TCK_1(); dshift = (dshift >> 1) | (din << 7); TCK_0()
;;;151    
;;;152        if (NCS_GETOUT()) {
;;;153            BPORT_SHIFT_BIT();
;;;154            BPORT_SHIFT_BIT();
;;;155            BPORT_SHIFT_BIT();
;;;156            BPORT_SHIFT_BIT();
;;;157            BPORT_SHIFT_BIT();
;;;158            BPORT_SHIFT_BIT();
;;;159            BPORT_SHIFT_BIT();
;;;160            BPORT_SHIFT_BIT();
;;;161            return dshift & 0xff;
;;;162        }
;;;163    
;;;164    #undef BPORT_SHIFT_BIT
;;;165    #endif //BLASTER_AS_MODE_EN
;;;166    
;;;167    #define BPORT_SHIFT_BIT()    TDI_OUT(dshift); din = TDO_IN(); TCK_1(); dshift = (dshift >> 1) | (din << 7); TCK_0()
;;;168        
;;;169        BPORT_SHIFT_BIT();
000002  f8c10190          STR      r0,[r1,#0x190]
000006  f8d13118          LDR      r3,[r1,#0x118]
00000a  2201              MOVS     r2,#1
00000c  f8c12180          STR      r2,[r1,#0x180]
000010  0840              LSRS     r0,r0,#1
000012  ea4013c3          ORR      r3,r0,r3,LSL #7
000016  2000              MOVS     r0,#0
000018  f8c10180          STR      r0,[r1,#0x180]
;;;170        BPORT_SHIFT_BIT();
00001c  f8c13190          STR      r3,[r1,#0x190]
000020  f8d1c118          LDR      r12,[r1,#0x118]
000024  f8c12180          STR      r2,[r1,#0x180]
000028  085b              LSRS     r3,r3,#1
00002a  ea4313cc          ORR      r3,r3,r12,LSL #7
00002e  f8c10180          STR      r0,[r1,#0x180]
;;;171        BPORT_SHIFT_BIT();
000032  f8c13190          STR      r3,[r1,#0x190]
000036  f8d1c118          LDR      r12,[r1,#0x118]
00003a  f8c12180          STR      r2,[r1,#0x180]
00003e  085b              LSRS     r3,r3,#1
000040  ea4313cc          ORR      r3,r3,r12,LSL #7
000044  f8c10180          STR      r0,[r1,#0x180]
;;;172        BPORT_SHIFT_BIT();
000048  f8c13190          STR      r3,[r1,#0x190]
00004c  f8d1c118          LDR      r12,[r1,#0x118]
000050  f8c12180          STR      r2,[r1,#0x180]
000054  085b              LSRS     r3,r3,#1
000056  ea4313cc          ORR      r3,r3,r12,LSL #7
00005a  f8c10180          STR      r0,[r1,#0x180]
;;;173        BPORT_SHIFT_BIT();
00005e  f8c13190          STR      r3,[r1,#0x190]
000062  f8d1c118          LDR      r12,[r1,#0x118]
000066  f8c12180          STR      r2,[r1,#0x180]
00006a  085b              LSRS     r3,r3,#1
00006c  ea4313cc          ORR      r3,r3,r12,LSL #7
000070  f8c10180          STR      r0,[r1,#0x180]
;;;174        BPORT_SHIFT_BIT();
000074  f8c13190          STR      r3,[r1,#0x190]
000078  f8d1c118          LDR      r12,[r1,#0x118]
00007c  f8c12180          STR      r2,[r1,#0x180]
000080  085b              LSRS     r3,r3,#1
000082  ea4313cc          ORR      r3,r3,r12,LSL #7
000086  f8c10180          STR      r0,[r1,#0x180]
;;;175        BPORT_SHIFT_BIT();
00008a  f8c13190          STR      r3,[r1,#0x190]
00008e  f8d1c118          LDR      r12,[r1,#0x118]
000092  f8c12180          STR      r2,[r1,#0x180]
000096  085b              LSRS     r3,r3,#1
000098  ea4313cc          ORR      r3,r3,r12,LSL #7
00009c  f8c10180          STR      r0,[r1,#0x180]
;;;176        BPORT_SHIFT_BIT();
0000a0  f8c13190          STR      r3,[r1,#0x190]
0000a4  f8d1c118          LDR      r12,[r1,#0x118]
0000a8  f8c12180          STR      r2,[r1,#0x180]
0000ac  085a              LSRS     r2,r3,#1
0000ae  ea4212cc          ORR      r2,r2,r12,LSL #7
0000b2  f8c10180          STR      r0,[r1,#0x180]
;;;177    
;;;178    #undef BPORT_SHIFT_BIT
;;;179    
;;;180        return dshift & 0xff;
0000b6  b2d0              UXTB     r0,r2
;;;181    }
0000b8  4770              BX       lr
                          ENDP

0000ba  0000              DCW      0x0000
                  |L2.188|
                          DCD      0x42210000

                          AREA ||i.bport_shift_out||, CODE, READONLY, ALIGN=2

                  bport_shift_out PROC
;;;126    // shift mode output
;;;127    void bport_shift_out(uint8_t d)
000000  491d              LDR      r1,|L3.120|
;;;128    {
;;;129    #define BPORT_SHIFT_BIT()    TDI_OUT(d); TCK_1(); d >>= 1; TCK_0()
;;;130    
;;;131        BPORT_SHIFT_BIT();
000002  f8c10190          STR      r0,[r1,#0x190]
000006  2201              MOVS     r2,#1
000008  f8c12180          STR      r2,[r1,#0x180]
00000c  0843              LSRS     r3,r0,#1
00000e  2000              MOVS     r0,#0
000010  f8c10180          STR      r0,[r1,#0x180]
;;;132        BPORT_SHIFT_BIT();
000014  f8c13190          STR      r3,[r1,#0x190]
000018  f8c12180          STR      r2,[r1,#0x180]
00001c  085b              LSRS     r3,r3,#1
00001e  f8c10180          STR      r0,[r1,#0x180]
;;;133        BPORT_SHIFT_BIT();
000022  f8c13190          STR      r3,[r1,#0x190]
000026  f8c12180          STR      r2,[r1,#0x180]
00002a  085b              LSRS     r3,r3,#1
00002c  f8c10180          STR      r0,[r1,#0x180]
;;;134        BPORT_SHIFT_BIT();
000030  f8c13190          STR      r3,[r1,#0x190]
000034  f8c12180          STR      r2,[r1,#0x180]
000038  085b              LSRS     r3,r3,#1
00003a  f8c10180          STR      r0,[r1,#0x180]
;;;135        BPORT_SHIFT_BIT();
00003e  f8c13190          STR      r3,[r1,#0x190]
000042  f8c12180          STR      r2,[r1,#0x180]
000046  085b              LSRS     r3,r3,#1
000048  f8c10180          STR      r0,[r1,#0x180]
;;;136        BPORT_SHIFT_BIT();
00004c  f8c13190          STR      r3,[r1,#0x190]
000050  f8c12180          STR      r2,[r1,#0x180]
000054  085b              LSRS     r3,r3,#1
000056  f8c10180          STR      r0,[r1,#0x180]
;;;137        BPORT_SHIFT_BIT();
00005a  f8c13190          STR      r3,[r1,#0x190]
00005e  f8c12180          STR      r2,[r1,#0x180]
000062  085b              LSRS     r3,r3,#1
000064  f8c10180          STR      r0,[r1,#0x180]
;;;138        BPORT_SHIFT_BIT();
000068  f8c13190          STR      r3,[r1,#0x190]
00006c  f8c12180          STR      r2,[r1,#0x180]
000070  f8c10180          STR      r0,[r1,#0x180]
;;;139    
;;;140    #undef BPORT_SHIFT_BIT
;;;141    }
000074  4770              BX       lr
;;;142    
                          ENDP

000076  0000              DCW      0x0000
                  |L3.120|
                          DCD      0x42210000

                          AREA ||i.bport_state_get||, CODE, READONLY, ALIGN=2

                  bport_state_get PROC
;;;113    // bit-bang mode input
;;;114    uint8_t bport_state_get(void)
000000  4802              LDR      r0,|L4.12|
;;;115    {
;;;116        uint32_t d = 0;
;;;117    
;;;118        d |= TDO_IN() << BLASTER_STA_IN_TDO_BIT;
000002  f8d00118          LDR      r0,[r0,#0x118]
;;;119    #ifdef BLASTER_AS_MODE_EN
;;;120        d |= DATAOUT_IN() << BLASTER_STA_IN_DATAOUT_BIT;
;;;121    #endif
;;;122    
;;;123        return (uint8_t)d;
000006  b2c0              UXTB     r0,r0
;;;124    }
000008  4770              BX       lr
;;;125    
                          ENDP

00000a  0000              DCW      0x0000
                  |L4.12|
                          DCD      0x42210000

                          AREA ||i.bport_state_set||, CODE, READONLY, ALIGN=2

                  bport_state_set PROC
;;;98     // bit-band mode output
;;;99     void bport_state_set(uint8_t d)
000000  4908              LDR      r1,|L5.36|
;;;100    {
;;;101        TDI_OUT(0 != (d & BLASTER_STA_OUT_TDI));
000002  f3c01200          UBFX     r2,r0,#4,#1
000006  f8c12190          STR      r2,[r1,#0x190]
;;;102        TMS_OUT(0 != (d & BLASTER_STA_OUT_TMS));
00000a  f3c00240          UBFX     r2,r0,#1,#1
00000e  f8c12184          STR      r2,[r1,#0x184]
;;;103        TCK_OUT(0 != (d & BLASTER_STA_OUT_TCK));
000012  f0000201          AND      r2,r0,#1
000016  f8c12180          STR      r2,[r1,#0x180]
;;;104    #ifdef BLASTER_AS_MODE_EN
;;;105        NCE_OUT(0 != (d & BLASTER_STA_OUT_NCE));
;;;106        NCS_OUT(0 != (d & BLASTER_STA_OUT_NCS));
;;;107    #endif
;;;108    #ifdef BLASTER_OE_LED_EN
;;;109        OE_OUT(0 != (d & BLASTER_STA_OUT_OE));
00001a  f3c01040          UBFX     r0,r0,#5,#1
00001e  f8c10194          STR      r0,[r1,#0x194]
;;;110    #endif
;;;111    }
000022  4770              BX       lr
;;;112    
                          ENDP

                  |L5.36|
                          DCD      0x42210000

;*** Start embedded assembler ***

#line 1 "..\\src\\blaster_port.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_blaster_port_c_79c7205e____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___14_blaster_port_c_79c7205e____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_blaster_port_c_79c7205e____REVSH|
#line 402
|__asm___14_blaster_port_c_79c7205e____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_blaster_port_c_79c7205e____RRX|
#line 587
|__asm___14_blaster_port_c_79c7205e____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
