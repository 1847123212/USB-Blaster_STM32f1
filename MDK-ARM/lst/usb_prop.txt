; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\usb_prop.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\usb_prop.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\usb -I..\drv -I..\sys -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -IC:\Work\WiDSO-master\MCU\USB-Blaster\MDK-ARM\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\out\usb_prop.crf ..\usb\usb_prop.c]
                          THUMB

                          AREA ||i.Blaster_Data_Setup||, CODE, READONLY, ALIGN=2

                  Blaster_Data_Setup PROC
;;;242    *******************************************************************************/
;;;243    RESULT Blaster_Data_Setup(uint8_t RequestNo)
000000  b570              PUSH     {r4-r6,lr}
;;;244    {
000002  4606              MOV      r6,r0
;;;245        uint8_t *(*CopyRoutine)(uint16_t);
;;;246        uint8_t addr;
;;;247    
;;;248        CopyRoutine = NULL;
000004  2400              MOVS     r4,#0
;;;249    
;;;250        // emulate ft245
;;;251        if (Type_Recipient == (VENDOR_REQUEST | DEVICE_RECIPIENT)) {
000006  4820              LDR      r0,|L1.136|
000008  6800              LDR      r0,[r0,#0]  ; pInformation
00000a  7800              LDRB     r0,[r0,#0]
00000c  f000007f          AND      r0,r0,#0x7f
000010  2840              CMP      r0,#0x40
000012  d12b              BNE      |L1.108|
;;;252            if (pInformation->USBbmRequestType & 0x80) {
000014  481c              LDR      r0,|L1.136|
000016  6800              LDR      r0,[r0,#0]  ; pInformation
000018  7800              LDRB     r0,[r0,#0]
00001a  f0000080          AND      r0,r0,#0x80
00001e  b318              CBZ      r0,|L1.104|
;;;253                // device -> host
;;;254                switch (RequestNo) {
000020  2e05              CMP      r6,#5
000022  d013              BEQ      |L1.76|
000024  2e90              CMP      r6,#0x90
000026  d118              BNE      |L1.90|
;;;255                case FTDI_VEN_REQ_RD_EEPROM:
;;;256                    addr = ((pInformation->USBwIndex >> 8) & 0x3F) << 1;
000028  4817              LDR      r0,|L1.136|
00002a  6800              LDR      r0,[r0,#0]  ; pInformation
00002c  8880              LDRH     r0,[r0,#4]
00002e  f3c02005          UBFX     r0,r0,#8,#6
000032  0045              LSLS     r5,r0,#1
;;;257                    s_Report_Buf[0] = ft245rom_read(addr);
000034  4628              MOV      r0,r5
000036  f7fffffe          BL       ft245rom_read
00003a  4914              LDR      r1,|L1.140|
00003c  7008              STRB     r0,[r1,#0]
;;;258                    s_Report_Buf[1] = ft245rom_read(addr + 1);
00003e  1c68              ADDS     r0,r5,#1
000040  f7fffffe          BL       ft245rom_read
000044  4911              LDR      r1,|L1.140|
000046  7048              STRB     r0,[r1,#1]
;;;259                    CopyRoutine = Blaster_Get_VendorData;
000048  4c11              LDR      r4,|L1.144|
;;;260                    break;
00004a  e00c              B        |L1.102|
                  |L1.76|
;;;261                case FTDI_VEN_REQ_GET_MODEM_STA:
;;;262                    // return fixed modem status
;;;263                    s_Report_Buf[0] = FTDI_MODEM_STA_DUMMY0;
00004c  2001              MOVS     r0,#1
00004e  490f              LDR      r1,|L1.140|
000050  7008              STRB     r0,[r1,#0]
;;;264                    s_Report_Buf[1] = FTDI_MODEM_STA_DUMMY1;
000052  2060              MOVS     r0,#0x60
000054  7048              STRB     r0,[r1,#1]
;;;265                    CopyRoutine = Blaster_Get_VendorData;
000056  4c0e              LDR      r4,|L1.144|
;;;266                    break;
000058  e005              B        |L1.102|
                  |L1.90|
;;;267                default:
;;;268                    // return dummy data
;;;269                    s_Report_Buf[0] = 0x0;
00005a  2000              MOVS     r0,#0
00005c  490b              LDR      r1,|L1.140|
00005e  7008              STRB     r0,[r1,#0]
;;;270                    s_Report_Buf[1] = 0x0;
000060  7048              STRB     r0,[r1,#1]
;;;271                    CopyRoutine = Blaster_Get_VendorData;
000062  4c0b              LDR      r4,|L1.144|
;;;272                    break;
000064  bf00              NOP      
                  |L1.102|
000066  e001              B        |L1.108|
                  |L1.104|
;;;273                }
;;;274            } else {
;;;275                return USB_UNSUPPORT;
000068  2002              MOVS     r0,#2
                  |L1.106|
;;;276            }
;;;277        }
;;;278    
;;;279        if (CopyRoutine == NULL) {
;;;280            return USB_UNSUPPORT;
;;;281        }
;;;282    
;;;283        pInformation->Ctrl_Info.CopyData = CopyRoutine;
;;;284        pInformation->Ctrl_Info.Usb_wOffset = 0;
;;;285        (*CopyRoutine)(0);
;;;286        
;;;287        return USB_SUCCESS;
;;;288    }
00006a  bd70              POP      {r4-r6,pc}
                  |L1.108|
00006c  b90c              CBNZ     r4,|L1.114|
00006e  2002              MOVS     r0,#2                 ;280
000070  e7fb              B        |L1.106|
                  |L1.114|
000072  4805              LDR      r0,|L1.136|
000074  6800              LDR      r0,[r0,#0]            ;283  ; pInformation
000076  6184              STR      r4,[r0,#0x18]         ;283
000078  2100              MOVS     r1,#0                 ;284
00007a  4803              LDR      r0,|L1.136|
00007c  6800              LDR      r0,[r0,#0]            ;284  ; pInformation
00007e  8241              STRH     r1,[r0,#0x12]         ;284
000080  2000              MOVS     r0,#0                 ;285
000082  47a0              BLX      r4                    ;285
000084  2000              MOVS     r0,#0                 ;287
000086  e7f0              B        |L1.106|
;;;289    
                          ENDP

                  |L1.136|
                          DCD      pInformation
                  |L1.140|
                          DCD      s_Report_Buf
                  |L1.144|
                          DCD      Blaster_Get_VendorData

                          AREA ||i.Blaster_GetConfigDescriptor||, CODE, READONLY, ALIGN=2

                  Blaster_GetConfigDescriptor PROC
;;;338    *******************************************************************************/
;;;339    uint8_t *Blaster_GetConfigDescriptor(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;340    {
000002  4604              MOV      r4,r0
;;;341        return Standard_GetDescriptorData(Length, &Config_Descriptor);
000004  4902              LDR      r1,|L2.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       Standard_GetDescriptorData
;;;342    }
00000c  bd10              POP      {r4,pc}
;;;343    
                          ENDP

00000e  0000              DCW      0x0000
                  |L2.16|
                          DCD      Config_Descriptor

                          AREA ||i.Blaster_GetDeviceDescriptor||, CODE, READONLY, ALIGN=2

                  Blaster_GetDeviceDescriptor PROC
;;;326    *******************************************************************************/
;;;327    uint8_t *Blaster_GetDeviceDescriptor(uint16_t Length)
000000  b510              PUSH     {r4,lr}
;;;328    {
000002  4604              MOV      r4,r0
;;;329        return Standard_GetDescriptorData(Length, &Device_Descriptor);
000004  4902              LDR      r1,|L3.16|
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       Standard_GetDescriptorData
;;;330    }
00000c  bd10              POP      {r4,pc}
;;;331    
                          ENDP

00000e  0000              DCW      0x0000
                  |L3.16|
                          DCD      Device_Descriptor

                          AREA ||i.Blaster_GetStringDescriptor||, CODE, READONLY, ALIGN=2

                  Blaster_GetStringDescriptor PROC
;;;350    *******************************************************************************/
;;;351    uint8_t *Blaster_GetStringDescriptor(uint16_t Length)
000000  b570              PUSH     {r4-r6,lr}
;;;352    {
000002  4605              MOV      r5,r0
;;;353        uint8_t wValue0 = pInformation->USBwValue0;
000004  4806              LDR      r0,|L4.32|
000006  6800              LDR      r0,[r0,#0]  ; pInformation
000008  78c4              LDRB     r4,[r0,#3]
;;;354        
;;;355        if (wValue0 > 4) {
00000a  2c04              CMP      r4,#4
00000c  dd01              BLE      |L4.18|
;;;356            return NULL;
00000e  2000              MOVS     r0,#0
                  |L4.16|
;;;357        } else {
;;;358            return Standard_GetDescriptorData(Length, &String_Descriptor[wValue0]);
;;;359        }
;;;360    }
000010  bd70              POP      {r4-r6,pc}
                  |L4.18|
000012  4804              LDR      r0,|L4.36|
000014  eb0001c4          ADD      r1,r0,r4,LSL #3       ;358
000018  4628              MOV      r0,r5                 ;358
00001a  f7fffffe          BL       Standard_GetDescriptorData
00001e  e7f7              B        |L4.16|
;;;361    
                          ENDP

                  |L4.32|
                          DCD      pInformation
                  |L4.36|
                          DCD      String_Descriptor

                          AREA ||i.Blaster_Get_Interface_Setting||, CODE, READONLY, ALIGN=1

                  Blaster_Get_Interface_Setting PROC
;;;370    *******************************************************************************/
;;;371    RESULT Blaster_Get_Interface_Setting(uint8_t Interface, uint8_t AlternateSetting)
000000  4602              MOV      r2,r0
;;;372    {
;;;373        if (AlternateSetting > 0) {
000002  2900              CMP      r1,#0
000004  dd01              BLE      |L5.10|
;;;374            return USB_UNSUPPORT;
000006  2002              MOVS     r0,#2
                  |L5.8|
;;;375        } else if (Interface > 0) {
;;;376            return USB_UNSUPPORT;
;;;377        }
;;;378        
;;;379        return USB_SUCCESS;
;;;380    }
000008  4770              BX       lr
                  |L5.10|
00000a  2a00              CMP      r2,#0                 ;375
00000c  dd01              BLE      |L5.18|
00000e  2002              MOVS     r0,#2                 ;376
000010  e7fa              B        |L5.8|
                  |L5.18|
000012  2000              MOVS     r0,#0                 ;379
000014  e7f8              B        |L5.8|
;;;381    
                          ENDP


                          AREA ||i.Blaster_Get_VendorData||, CODE, READONLY, ALIGN=2

                  Blaster_Get_VendorData PROC
;;;388    *******************************************************************************/
;;;389    uint8_t *Blaster_Get_VendorData(uint16_t Length)
000000  4601              MOV      r1,r0
;;;390    {
;;;391        if (Length == 0) {
000002  b929              CBNZ     r1,|L6.16|
;;;392            pInformation->Ctrl_Info.Usb_wLength = sizeof(s_Report_Buf);
000004  2002              MOVS     r0,#2
000006  4a03              LDR      r2,|L6.20|
000008  6812              LDR      r2,[r2,#0]  ; pInformation
00000a  8210              STRH     r0,[r2,#0x10]
;;;393            return NULL;
00000c  2000              MOVS     r0,#0
                  |L6.14|
;;;394        }
;;;395        
;;;396        return (uint8_t *)s_Report_Buf;
;;;397    }
00000e  4770              BX       lr
                  |L6.16|
000010  4801              LDR      r0,|L6.24|
000012  e7fc              B        |L6.14|
;;;398    
                          ENDP

                  |L6.20|
                          DCD      pInformation
                  |L6.24|
                          DCD      s_Report_Buf

                          AREA ||i.Blaster_Init||, CODE, READONLY, ALIGN=2

                  Blaster_Init PROC
;;;111    *******************************************************************************/
;;;112    void Blaster_Init(void)
000000  b510              PUSH     {r4,lr}
;;;113    {
;;;114        /* Update the serial number string descriptor with the data from the unique ID*/
;;;115        Get_SerialNum();
000002  f7fffffe          BL       Get_SerialNum
;;;116    
;;;117        pInformation->Current_Configuration = 0;
000006  2000              MOVS     r0,#0
000008  4906              LDR      r1,|L7.36|
00000a  6809              LDR      r1,[r1,#0]  ; pInformation
00000c  7288              STRB     r0,[r1,#0xa]
;;;118    
;;;119        /* Connect the device */
;;;120        PowerOn();
00000e  f7fffffe          BL       PowerOn
;;;121    
;;;122        /* Perform basic device initialization operations */
;;;123        USB_SIL_Init();
000012  f7fffffe          BL       USB_SIL_Init
;;;124    
;;;125        ft245rom_init();
000016  f7fffffe          BL       ft245rom_init
;;;126    
;;;127        bDeviceState = UNCONNECTED;
00001a  2000              MOVS     r0,#0
00001c  4902              LDR      r1,|L7.40|
00001e  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;128    }
000020  bd10              POP      {r4,pc}
;;;129    
                          ENDP

000022  0000              DCW      0x0000
                  |L7.36|
                          DCD      pInformation
                  |L7.40|
                          DCD      bDeviceState

                          AREA ||i.Blaster_NoData_Setup||, CODE, READONLY, ALIGN=2

                  Blaster_NoData_Setup PROC
;;;296    *******************************************************************************/
;;;297    RESULT Blaster_NoData_Setup(uint8_t RequestNo)
000000  4601              MOV      r1,r0
;;;298    {
;;;299        if ((Type_Recipient == (VENDOR_REQUEST | DEVICE_RECIPIENT))) {
000002  480c              LDR      r0,|L8.52|
000004  6800              LDR      r0,[r0,#0]  ; pInformation
000006  7800              LDRB     r0,[r0,#0]
000008  f000007f          AND      r0,r0,#0x7f
00000c  2840              CMP      r0,#0x40
00000e  d10f              BNE      |L8.48|
;;;300            switch (RequestNo) {
000010  2905              CMP      r1,#5
000012  d209              BCS      |L8.40|
000014  e8dff001          TBB      [pc,r1]
000018  03040506          DCB      0x03,0x04,0x05,0x06
00001c  0700              DCB      0x07,0x00
;;;301            case FTDI_VEN_REQ_RESET:
;;;302                break;
00001e  e004              B        |L8.42|
;;;303            case FTDI_VEN_REQ_SET_BAUDRATE:
;;;304                break;
000020  e003              B        |L8.42|
;;;305            case FTDI_VEN_REQ_SET_DATA_CHAR:
;;;306                break;
000022  e002              B        |L8.42|
;;;307            case FTDI_VEN_REQ_SET_FLOW_CTRL:
;;;308                break;
000024  e001              B        |L8.42|
;;;309            case FTDI_VEN_REQ_SET_MODEM_CTRL:
;;;310                break;
000026  e000              B        |L8.42|
                  |L8.40|
;;;311            default:
;;;312                break;
000028  bf00              NOP      
                  |L8.42|
00002a  bf00              NOP                            ;302
;;;313            }
;;;314            return USB_SUCCESS;
00002c  2000              MOVS     r0,#0
                  |L8.46|
;;;315        }
;;;316        
;;;317        return USB_UNSUPPORT;
;;;318    }
00002e  4770              BX       lr
                  |L8.48|
000030  2002              MOVS     r0,#2                 ;317
000032  e7fc              B        |L8.46|
;;;319    
                          ENDP

                  |L8.52|
                          DCD      pInformation

                          AREA ||i.Blaster_Reset||, CODE, READONLY, ALIGN=2

                  Blaster_Reset PROC
;;;136    *******************************************************************************/
;;;137    void Blaster_Reset(void)
000000  b510              PUSH     {r4,lr}
;;;138    {
;;;139        /* Set the device as not configured */
;;;140        pInformation->Current_Configuration = 0;
000002  2000              MOVS     r0,#0
000004  4939              LDR      r1,|L9.236|
000006  6809              LDR      r1,[r1,#0]  ; pInformation
000008  7288              STRB     r0,[r1,#0xa]
;;;141        pInformation->Current_Interface = 0;/*the default Interface*/
00000a  4938              LDR      r1,|L9.236|
00000c  6809              LDR      r1,[r1,#0]  ; pInformation
00000e  72c8              STRB     r0,[r1,#0xb]
;;;142    
;;;143        /* Current Feature initialization */
;;;144        pInformation->Current_Feature = Blaster_ConfigDescriptor[7];
000010  4837              LDR      r0,|L9.240|
000012  79c0              LDRB     r0,[r0,#7]  ; Blaster_ConfigDescriptor
000014  4935              LDR      r1,|L9.236|
000016  6809              LDR      r1,[r1,#0]  ; pInformation
000018  7248              STRB     r0,[r1,#9]
;;;145    
;;;146        SetBTABLE(BTABLE_ADDRESS);
00001a  2000              MOVS     r0,#0
00001c  f7fffffe          BL       SetBTABLE
;;;147    
;;;148        /* Initialize Endpoint 0 */
;;;149        SetEPType(ENDP0, EP_CONTROL);
000020  f44f7100          MOV      r1,#0x200
000024  2000              MOVS     r0,#0
000026  f7fffffe          BL       SetEPType
;;;150        SetEPTxStatus(ENDP0, EP_TX_NAK);
00002a  2120              MOVS     r1,#0x20
00002c  2000              MOVS     r0,#0
00002e  f7fffffe          BL       SetEPTxStatus
;;;151        SetEPRxAddr(ENDP0, ENDP0_RXADDR);
000032  2120              MOVS     r1,#0x20
000034  2000              MOVS     r0,#0
000036  f7fffffe          BL       SetEPRxAddr
;;;152        SetEPTxAddr(ENDP0, ENDP0_TXADDR);
00003a  2160              MOVS     r1,#0x60
00003c  2000              MOVS     r0,#0
00003e  f7fffffe          BL       SetEPTxAddr
;;;153        Clear_Status_Out(ENDP0);
000042  2000              MOVS     r0,#0
000044  f7fffffe          BL       Clear_Status_Out
;;;154        SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
000048  482a              LDR      r0,|L9.244|
00004a  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
00004e  2000              MOVS     r0,#0
000050  f7fffffe          BL       SetEPRxCount
;;;155        SetEPRxValid(ENDP0);
000054  2000              MOVS     r0,#0
000056  f7fffffe          BL       SetEPRxValid
;;;156    
;;;157        /* Initialize Endpoint 1 as BULK IN */
;;;158        SetEPType(ENDP1, EP_BULK);
00005a  2100              MOVS     r1,#0
00005c  2001              MOVS     r0,#1
00005e  f7fffffe          BL       SetEPType
;;;159        SetEPTxAddr(ENDP1, ENDP1_TXADDR);
000062  21a0              MOVS     r1,#0xa0
000064  2001              MOVS     r0,#1
000066  f7fffffe          BL       SetEPTxAddr
;;;160        SetEPTxCount(ENDP1, ENDP1_TXSIZE);
00006a  2140              MOVS     r1,#0x40
00006c  2001              MOVS     r0,#1
00006e  f7fffffe          BL       SetEPTxCount
;;;161        SetEPTxStatus(ENDP1, EP_TX_NAK);
000072  2120              MOVS     r1,#0x20
000074  2001              MOVS     r0,#1
000076  f7fffffe          BL       SetEPTxStatus
;;;162        SetEPRxStatus(ENDP1, EP_RX_DIS);
00007a  2100              MOVS     r1,#0
00007c  2001              MOVS     r0,#1
00007e  f7fffffe          BL       SetEPRxStatus
;;;163    
;;;164        /* Initialize Endpoint 2 as BULK OUT */
;;;165        SetEPType(ENDP2, EP_BULK);
000082  2100              MOVS     r1,#0
000084  2002              MOVS     r0,#2
000086  f7fffffe          BL       SetEPType
;;;166        SetEPDoubleBuff(ENDP2); 
00008a  2002              MOVS     r0,#2
00008c  f7fffffe          BL       SetEPDoubleBuff
;;;167        SetEPDblBuffAddr(ENDP2, ENDP2_RXADDR0, ENDP2_RXADDR1); 
000090  f44f72a0          MOV      r2,#0x140
000094  f44f7180          MOV      r1,#0x100
000098  2002              MOVS     r0,#2
00009a  f7fffffe          BL       SetEPDblBuffAddr
;;;168        SetEPDblBuffCount(ENDP2, EP_DBUF_OUT, ENDP2_RXSIZE); 
00009e  2240              MOVS     r2,#0x40
0000a0  2101              MOVS     r1,#1
0000a2  2002              MOVS     r0,#2
0000a4  f7fffffe          BL       SetEPDblBuffCount
;;;169        ClearDTOG_RX(ENDP2); 
0000a8  2002              MOVS     r0,#2
0000aa  f7fffffe          BL       ClearDTOG_RX
;;;170        ClearDTOG_TX(ENDP2); 
0000ae  2002              MOVS     r0,#2
0000b0  f7fffffe          BL       ClearDTOG_TX
;;;171        ToggleDTOG_TX(ENDP2); 
0000b4  2002              MOVS     r0,#2
0000b6  f7fffffe          BL       ToggleDTOG_TX
;;;172        SetEPRxStatus(ENDP2, EP_RX_VALID);
0000ba  f44f5140          MOV      r1,#0x3000
0000be  2002              MOVS     r0,#2
0000c0  f7fffffe          BL       SetEPRxStatus
;;;173        SetEPTxStatus(ENDP2, EP_TX_DIS);
0000c4  2100              MOVS     r1,#0
0000c6  2002              MOVS     r0,#2
0000c8  f7fffffe          BL       SetEPTxStatus
;;;174        
;;;175        SetEPRxCount(ENDP0, Device_Property.MaxPacketSize);
0000cc  4809              LDR      r0,|L9.244|
0000ce  f890102c          LDRB     r1,[r0,#0x2c]  ; Device_Property
0000d2  2000              MOVS     r0,#0
0000d4  f7fffffe          BL       SetEPRxCount
;;;176        SetEPRxValid(ENDP0);
0000d8  2000              MOVS     r0,#0
0000da  f7fffffe          BL       SetEPRxValid
;;;177    
;;;178        /* Set the device to response on default address */
;;;179        SetDeviceAddress(0);
0000de  2000              MOVS     r0,#0
0000e0  f7fffffe          BL       SetDeviceAddress
;;;180    
;;;181        bDeviceState = ATTACHED;
0000e4  2001              MOVS     r0,#1
0000e6  4904              LDR      r1,|L9.248|
0000e8  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;182    }
0000ea  bd10              POP      {r4,pc}
;;;183    
                          ENDP

                  |L9.236|
                          DCD      pInformation
                  |L9.240|
                          DCD      Blaster_ConfigDescriptor
                  |L9.244|
                          DCD      Device_Property
                  |L9.248|
                          DCD      bDeviceState

                          AREA ||i.Blaster_SetConfiguration||, CODE, READONLY, ALIGN=2

                  Blaster_SetConfiguration PROC
;;;191    *******************************************************************************/
;;;192    void Blaster_SetConfiguration(void)
000000  4803              LDR      r0,|L10.16|
;;;193    {
;;;194        if (pInformation->Current_Configuration != 0) {
000002  6800              LDR      r0,[r0,#0]  ; pInformation
000004  7a80              LDRB     r0,[r0,#0xa]
000006  b110              CBZ      r0,|L10.14|
;;;195            /* Device configured */
;;;196            bDeviceState = CONFIGURED;
000008  2005              MOVS     r0,#5
00000a  4902              LDR      r1,|L10.20|
00000c  6008              STR      r0,[r1,#0]  ; bDeviceState
                  |L10.14|
;;;197        }
;;;198    }
00000e  4770              BX       lr
;;;199    
                          ENDP

                  |L10.16|
                          DCD      pInformation
                  |L10.20|
                          DCD      bDeviceState

                          AREA ||i.Blaster_SetDeviceAddress||, CODE, READONLY, ALIGN=2

                  Blaster_SetDeviceAddress PROC
;;;206    *******************************************************************************/
;;;207    void Blaster_SetDeviceAddress(void)
000000  2004              MOVS     r0,#4
;;;208    {
;;;209        bDeviceState = ADDRESSED;
000002  4901              LDR      r1,|L11.8|
000004  6008              STR      r0,[r1,#0]  ; bDeviceState
;;;210    }
000006  4770              BX       lr
;;;211    
                          ENDP

                  |L11.8|
                          DCD      bDeviceState

                          AREA ||i.Blaster_Status_In||, CODE, READONLY, ALIGN=1

                  Blaster_Status_In PROC
;;;218    *******************************************************************************/
;;;219    void Blaster_Status_In(void)
000000  4770              BX       lr
;;;220    {
;;;221        return;
;;;222    }
;;;223    
                          ENDP


                          AREA ||i.Blaster_Status_Out||, CODE, READONLY, ALIGN=1

                  Blaster_Status_Out PROC
;;;230    *******************************************************************************/
;;;231    void Blaster_Status_Out(void)
000000  4770              BX       lr
;;;232    {
;;;233        return;
;;;234    }
;;;235    
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  s_Report_Buf
000000  0000              DCB      0x00,0x00
                  Device_Table
000002  0301              DCB      0x03,0x01
                  Device_Property
                          DCD      Blaster_Init
                          DCD      Blaster_Reset
                          DCD      Blaster_Status_In
                          DCD      Blaster_Status_Out
                          DCD      Blaster_Data_Setup
                          DCD      Blaster_NoData_Setup
                          DCD      Blaster_Get_Interface_Setting
                          DCD      Blaster_GetDeviceDescriptor
                          DCD      Blaster_GetConfigDescriptor
                          DCD      Blaster_GetStringDescriptor
                          DCD      0x00000000
000030  40000000          DCB      0x40,0x00,0x00,0x00
                  User_Standard_Requests
                          DCD      NOP_Process
                          DCD      Blaster_SetConfiguration
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      NOP_Process
                          DCD      Blaster_SetDeviceAddress
                  Device_Descriptor
                          DCD      Blaster_DeviceDescriptor
00005c  0012              DCW      0x0012
00005e  0000              DCB      0x00,0x00
                  Config_Descriptor
                          DCD      Blaster_ConfigDescriptor
000064  0020              DCW      0x0020
000066  0000              DCB      0x00,0x00
                  String_Descriptor
                          DCD      Blaster_StringLangID
00006c  0004              DCW      0x0004
00006e  0000              DCB      0x00,0x00
                          DCD      Blaster_StringVendor
000074  000e              DCW      0x000e
000076  0000              DCB      0x00,0x00
                          DCD      Blaster_StringProduct
00007c  0018              DCW      0x0018
00007e  0000              DCB      0x00,0x00
                          DCD      Blaster_StringSerial
000084  0012              DCW      0x0012
000086  0000              DCB      0x00,0x00

;*** Start embedded assembler ***

#line 1 "..\\usb\\usb_prop.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_e95c9bdd____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_usb_prop_c_e95c9bdd____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_e95c9bdd____REVSH|
#line 402
|__asm___10_usb_prop_c_e95c9bdd____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_usb_prop_c_e95c9bdd____RRX|
#line 587
|__asm___10_usb_prop_c_e95c9bdd____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
