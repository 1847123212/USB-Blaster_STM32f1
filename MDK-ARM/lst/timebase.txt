; generated by Component: ARM Compiler 5.06 update 1 (build 61) Tool: ArmCC [4d35ad]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\out\timebase.o --asm_dir=.\lst\ --list_dir=.\lst\ --depend=.\out\timebase.d --cpu=Cortex-M3 --apcs=interwork -O0 --diag_suppress=9931 -I..\src -I..\usb -I..\drv -I..\sys -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\STM32_USB-FS-Device_Driver\inc -I..\..\Libraries\CMSIS\Device\ST\STM32F10x\Include -IC:\Work\WiDSO-master\MCU\USB-Blaster\MDK-ARM\RTE -ID:\Keil_v5\ARM\PACK\ARM\CMSIS\4.5.0\CMSIS\Include -ID:\Keil_v5\ARM\PACK\Keil\STM32F1xx_DFP\2.0.0\Device\Include -D__MICROLIB -D__UVISION_VERSION=517 -D_RTE_ -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER -DSTM32F10X_MD --omf_browse=.\out\timebase.crf ..\drv\timebase.c]
                          THUMB

                          AREA ||i.NVIC_SetPriority||, CODE, READONLY, ALIGN=2

                  NVIC_SetPriority PROC
;;;1523    */
;;;1524   __STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
000000  b510              PUSH     {r4,lr}
;;;1525   {
;;;1526     if ((int32_t)(IRQn) < 0)
000002  2800              CMP      r0,#0
000004  da07              BGE      |L1.22|
;;;1527     {
;;;1528       SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000006  070a              LSLS     r2,r1,#28
000008  0e14              LSRS     r4,r2,#24
00000a  4a05              LDR      r2,|L1.32|
00000c  f000030f          AND      r3,r0,#0xf
000010  1f1b              SUBS     r3,r3,#4
000012  54d4              STRB     r4,[r2,r3]
000014  e003              B        |L1.30|
                  |L1.22|
;;;1529     }
;;;1530     else
;;;1531     {
;;;1532       NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
000016  070a              LSLS     r2,r1,#28
000018  0e13              LSRS     r3,r2,#24
00001a  4a02              LDR      r2,|L1.36|
00001c  5413              STRB     r3,[r2,r0]
                  |L1.30|
;;;1533     }
;;;1534   }
00001e  bd10              POP      {r4,pc}
;;;1535   
                          ENDP

                  |L1.32|
                          DCD      0xe000ed18
                  |L1.36|
                          DCD      0xe000e400

                          AREA ||i.SysTick_Handler||, CODE, READONLY, ALIGN=2

                  SysTick_Handler PROC
;;;41     // SysTick中断
;;;42     void SysTick_Handler(void)
000000  4802              LDR      r0,|L2.12|
;;;43     {
;;;44         s_system_up_ms++;
000002  6800              LDR      r0,[r0,#0]  ; s_system_up_ms
000004  1c40              ADDS     r0,r0,#1
000006  4901              LDR      r1,|L2.12|
000008  6008              STR      r0,[r1,#0]  ; s_system_up_ms
;;;45     }
00000a  4770              BX       lr
;;;46     
                          ENDP

                  |L2.12|
                          DCD      s_system_up_ms

                          AREA ||i.delay_ms||, CODE, READONLY, ALIGN=1

                  delay_ms PROC
;;;99     // ms级延时
;;;100    void delay_ms(uint32_t ms)
000000  b510              PUSH     {r4,lr}
;;;101    {
000002  4604              MOV      r4,r0
;;;102        while (ms--) {
000004  e003              B        |L3.14|
                  |L3.6|
;;;103            delay_us(1000);
000006  f44f707a          MOV      r0,#0x3e8
00000a  f7fffffe          BL       delay_us
                  |L3.14|
00000e  1e20              SUBS     r0,r4,#0              ;102
000010  f1a40401          SUB      r4,r4,#1              ;102
000014  d1f7              BNE      |L3.6|
;;;104        }
;;;105    }
000016  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||i.delay_us||, CODE, READONLY, ALIGN=1

                  delay_us PROC
;;;91     // us级延时
;;;92     void delay_us(uint32_t us)
000000  b530              PUSH     {r4,r5,lr}
;;;93     {
000002  4604              MOV      r4,r0
;;;94         uint32_t now = micros();
000004  f7fffffe          BL       micros
000008  4605              MOV      r5,r0
;;;95     
;;;96         while (micros() - now < us);
00000a  bf00              NOP      
                  |L4.12|
00000c  f7fffffe          BL       micros
000010  1b40              SUBS     r0,r0,r5
000012  42a0              CMP      r0,r4
000014  d3fa              BCC      |L4.12|
;;;97     }
000016  bd30              POP      {r4,r5,pc}
;;;98     
                          ENDP


                          AREA ||i.micros||, CODE, READONLY, ALIGN=2

                  micros PROC
;;;70     // 返回系统启动us数 (70分钟溢出)
;;;71     uint32_t micros(void)
000000  bf00              NOP      
                  |L5.2|
;;;72     {
;;;73         register uint32_t ms, cycle_cnt;
;;;74     
;;;75         do {
;;;76             ms = s_system_up_ms;
000002  480b              LDR      r0,|L5.48|
000004  6801              LDR      r1,[r0,#0]  ; s_system_up_ms
;;;77             cycle_cnt = SysTick->VAL;
000006  f04f20e0          MOV      r0,#0xe000e000
00000a  6982              LDR      r2,[r0,#0x18]
;;;78         } while (ms != s_system_up_ms);
00000c  4808              LDR      r0,|L5.48|
00000e  6800              LDR      r0,[r0,#0]  ; s_system_up_ms
000010  4281              CMP      r1,r0
000012  d1f6              BNE      |L5.2|
;;;79     
;;;80         return (ms * 1000) + (s_ms_ticks - cycle_cnt) / s_us_ticks;
000014  4807              LDR      r0,|L5.52|
000016  6800              LDR      r0,[r0,#0]  ; s_ms_ticks
000018  1a80              SUBS     r0,r0,r2
00001a  4b07              LDR      r3,|L5.56|
00001c  681b              LDR      r3,[r3,#0]  ; s_us_ticks
00001e  fbb0f0f3          UDIV     r0,r0,r3
000022  eb010341          ADD      r3,r1,r1,LSL #1
000026  ebc313c1          RSB      r3,r3,r1,LSL #7
00002a  eb0000c3          ADD      r0,r0,r3,LSL #3
;;;81     }
00002e  4770              BX       lr
;;;82     
                          ENDP

                  |L5.48|
                          DCD      s_system_up_ms
                  |L5.52|
                          DCD      s_ms_ticks
                  |L5.56|
                          DCD      s_us_ticks

                          AREA ||i.millis||, CODE, READONLY, ALIGN=2

                  millis PROC
;;;83     // 返回系统启动毫秒数 (49天溢出)
;;;84     uint32_t millis(void)
000000  4801              LDR      r0,|L6.8|
;;;85     {
;;;86         return s_system_up_ms;
000002  6800              LDR      r0,[r0,#0]  ; s_system_up_ms
;;;87     }
000004  4770              BX       lr
;;;88     
                          ENDP

000006  0000              DCW      0x0000
                  |L6.8|
                          DCD      s_system_up_ms

                          AREA ||i.ticks||, CODE, READONLY, ALIGN=1

                  ticks PROC
;;;64     // return SysTick count
;;;65     uint32_t ticks(void)
000000  f04f20e0          MOV      r0,#0xe000e000
;;;66     {
;;;67         return SysTick->VAL;
000004  6980              LDR      r0,[r0,#0x18]
;;;68     }
000006  4770              BX       lr
;;;69     
                          ENDP


                          AREA ||i.timebase_init||, CODE, READONLY, ALIGN=2

                  timebase_init PROC
;;;49     // 初始化
;;;50     void timebase_init(void)
000000  b510              PUSH     {r4,lr}
;;;51     {
;;;52         // 1us时钟数
;;;53         s_us_ticks = SystemCoreClock / 1000000;
000002  4815              LDR      r0,|L8.88|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  4915              LDR      r1,|L8.92|
000008  fbb0f0f1          UDIV     r0,r0,r1
00000c  4914              LDR      r1,|L8.96|
00000e  6008              STR      r0,[r1,#0]  ; s_us_ticks
;;;54         // 1ms时钟数
;;;55         s_ms_ticks = SystemCoreClock / 1000;
000010  4811              LDR      r0,|L8.88|
000012  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000014  f44f717a          MOV      r1,#0x3e8
000018  fbb0f0f1          UDIV     r0,r0,r1
00001c  4911              LDR      r1,|L8.100|
00001e  6008              STR      r0,[r1,#0]  ; s_ms_ticks
;;;56         // 1ms时基中断
;;;57         SysTick_Config(s_ms_ticks);
000020  4608              MOV      r0,r1
000022  6804              LDR      r4,[r0,#0]  ; s_ms_ticks
000024  1e60              SUBS     r0,r4,#1
000026  f1b07f80          CMP      r0,#0x1000000
00002a  d300              BCC      |L8.46|
00002c  e00f              B        |L8.78|
                  |L8.46|
00002e  1e60              SUBS     r0,r4,#1
000030  f04f21e0          MOV      r1,#0xe000e000
000034  6148              STR      r0,[r1,#0x14]
000036  210f              MOVS     r1,#0xf
000038  f04f30ff          MOV      r0,#0xffffffff
00003c  f7fffffe          BL       NVIC_SetPriority
000040  2000              MOVS     r0,#0
000042  f04f21e0          MOV      r1,#0xe000e000
000046  6188              STR      r0,[r1,#0x18]
000048  2007              MOVS     r0,#7
00004a  6108              STR      r0,[r1,#0x10]
00004c  bf00              NOP      
                  |L8.78|
;;;58         // 提高中断优先级，避免在其它中断中调用时计时出错
;;;59         NVIC_SetPriority(SysTick_IRQn, 0);
00004e  2100              MOVS     r1,#0
000050  1e48              SUBS     r0,r1,#1
000052  f7fffffe          BL       NVIC_SetPriority
;;;60     }
000056  bd10              POP      {r4,pc}
;;;61     
                          ENDP

                  |L8.88|
                          DCD      SystemCoreClock
                  |L8.92|
                          DCD      0x000f4240
                  |L8.96|
                          DCD      s_us_ticks
                  |L8.100|
                          DCD      s_ms_ticks

                          AREA ||.data||, DATA, ALIGN=2

                  s_us_ticks
                          DCD      0x00000000
                  s_ms_ticks
                          DCD      0x00000000
                  s_system_up_ms
                          DCD      0x00000000

;*** Start embedded assembler ***

#line 1 "..\\drv\\timebase.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_timebase_c_b672aa62____REV16|
#line 388 "D:\\Keil_v5\\ARM\\PACK\\ARM\\CMSIS\\4.5.0\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___10_timebase_c_b672aa62____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_timebase_c_b672aa62____REVSH|
#line 402
|__asm___10_timebase_c_b672aa62____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_timebase_c_b672aa62____RRX|
#line 587
|__asm___10_timebase_c_b672aa62____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
